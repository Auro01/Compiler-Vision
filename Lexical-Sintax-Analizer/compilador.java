/* Generated By:JavaCC: Do not edit this line. compilador.java */
import java.io.*;
import java.util.*;
class compilador implements compiladorConstants {
    //Beware those who seek the seecret wich lie within for once you start debugging youl never be the same...
    private static String printConsole;
    private static int tipo = 0;       //La variable indica el tipo de las siguientes variables declaradas en el renglón
    private static Vector<Objeto> varTemporal = new Vector<Objeto>();

    //Todas las funciones se guardán aqui en dferentes espacios (contextos) que contendran los contextos locales
    private static Vector<TablaVariables> listaContextos = new Vector<TablaVariables>();
    private static int contextoNum = -1; //Esta variable apunta a la tabla de contexto actual y se usa para generar el cuadruplo que maneja el apuntador al contexto actual
    private static Vector<Function> listaFunciones = new Vector<Function>();

    private static ArrayList<String> listaErrores = new ArrayList<String>();    //Todos los errores se imprimen después de compilación
    private static ArrayList<String> printConsoleArr = new ArrayList<String>(); //Esta lista se imprime en consola con el comando print al finalizar la compilación

    //En este arreglo se guarda cada cuadruplo a medida que se compila el programa, al final se ejecutaran todos los cuadruplos en orden
    public static ArrayList<Cuadruplo> cuadruplosArr = new ArrayList<Cuadruplo>();
    public static CuboSemantico cuboSemantico = new CuboSemantico();

    public static Stack<Integer> OperandStack = new Stack<Integer>();
    public static Stack<Integer> OperatorStack = new Stack<Integer>();
    public static Stack<Integer> TypeStack = new Stack<Integer>();
    public static Stack<Integer> JumpStack = new Stack<Integer>();
    public static Stack<Integer> ReturnStack = new Stack<Integer>();
    public static Stack<Integer> PendingGOTOStack = new Stack<Integer>();

    private static Memoria memGlobal = new Memoria(10000,40000);
    private static Memoria memLocal = new Memoria(40000,70000);
    private static Memoria memTemporal = new Memoria(70000,100000);
    private static Memoria memConstante = new Memoria(100000,130000);

    public static MaquinaVirtual vm;

    private static void asign(Token identificador, Objeto var){
        boolean error = true;

        int i = 0;
        //Realiza una busqueda del contexto global al local
        for(i = 0; i < listaContextos.size() && error; i++){
            if(listaContextos.get(i).obtenerVar(identificador.image)!=null){
                listaContextos.get(i).actualizarVar(identificador.image, var);
                error = false;
            }
        }

        if(error)listaErrores.add("Error found At line "+identificador.beginLine+", column "+identificador.beginColumn+"\u005cn   variable '"+identificador.image+"' has not been declared.");
    }

    private static Objeto search(String id){
        int i = 0;
        //Realiza una busqueda en el contexto global y local
        if(listaContextos.get(contextoNum).obtenerVar(id)!=null){
            return listaContextos.get(listaContextos.size()-1).obtenerVar(id);
        }else if(listaContextos.get(0).obtenerVar(id)!=null){
            return listaContextos.get(0).obtenerVar(id);
        }

        listaErrores.add("Error found At line "+token.beginLine+", column "+token.beginColumn+"\u005cn   variable '"+id+"' was not found.");
        token.image = "0";

        return new Objeto();
    }

    public static void decl(Token identificador, Objeto var){
        var.setType(tipo);
        boolean noVar = false;

        if(var.getStatus().equals("ok")){
            int i = 0;

            //Busca en el contexto global y local si la variable existe
            if(listaContextos.get(listaContextos.size()-1).obtenerVar(identificador.image)!=null || listaContextos.get(0).obtenerVar(identificador.image)!=null){
                noVar=true;
            }

            if(!noVar){
                listaContextos.lastElement().insertarVar(identificador.image, var);
            }
        }

        if(noVar){
            listaErrores.add("Error found At line "+identificador.beginLine+", column "+identificador.beginColumn+"\u005cn   variable '"+identificador.image+"' was already declared at this scope.");
        }
    }

    public static void main( String[] args )throws ParseException, Exception
        {
                try
                {
                compilador analizador = new compilador( System.in ) ;
                        analizador.Programa();
                        for(int i = 0; i < listaErrores.size(); i++){
                            System.out.println(listaErrores.get(i));
                        }
                        if(listaErrores.size()<1){
                        //listaContextos.get(0).verTabla();
                vm = new MaquinaVirtual(cuadruplosArr, memGlobal, memLocal,memTemporal,memConstante, listaFunciones);
                vm.run();
                System.out.println("\u005cn\u005ctBuild Sucessful");
                for(int i = 0; i < cuadruplosArr.size(); i++){
                    System.out.println(i + " " + cuadruplosArr.get(i));
                }
                        }else{
                        System.out.println("\u005cn"+listaErrores.size()+" errors.");
                        }
                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("\u005cn\u005ctErrors found.");
                }
        }

  static final public void Programa() throws ParseException {
Cuadruplo cuadActual = new Cuadruplo();
contextoNum++;
cuadActual.CuadruploSetIzqRes(cuadruplosArr.size(),19,-1,contextoNum);
cuadruplosArr.add(cuadActual);
listaContextos.addElement(new TablaVariables());
    jj_consume_token(PROGRAM);
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      VARS();
    }
            cuadActual = new Cuadruplo();
            cuadActual.CuadruploSetIzqRes(token.beginLine,17,-1,-1);
        PendingGOTOStack.push(cuadruplosArr.size());
        cuadruplosArr.add(cuadActual);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case CHAR:
      case VECTOR:
      case VOID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_2;
      }
      MODULO();
    }
    BLOQUE();
    jj_consume_token(0);
        cuadActual = new Cuadruplo();
        cuadActual.CuadruploSetRes(token.beginLine,22,1);
    cuadruplosArr.add(cuadActual);
  }

  static final public void BLOQUE() throws ParseException {
    if (jj_2_2(2)) {
      jj_consume_token(LKEY);
      BLOQUE_AUX();
      jj_consume_token(RKEY);
    } else {
      ;
    }
  }

  static final public void BLOQUE_AUX() throws ParseException {
    ESTATUTO();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case PRINT:
    case INT:
    case FLOAT:
    case CHAR:
    case RETURN:
    case ID:
      BLOQUE_AUX();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void ESTATUTO() throws ParseException {
    if (jj_2_3(3)) {
      VARS();
    } else if (jj_2_4(3)) {
      ASIGNACION();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        CONDICION();
        break;
      case PRINT:
        ESCRITURA();
        break;
      case WHILE:
        CICLO();
        break;
      case ID:
        LLAMADA_FUNC();
        jj_consume_token(SEMICOLON);
        break;
      case RETURN:
        RETORNO();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ASIGNACION() throws ParseException {
Objeto var = new Objeto();
Token identificador;
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
    identificador = jj_consume_token(ID);
        var = search(token.image);
        OperandStack.push(var.getDireccion());
        TypeStack.push(var.getType()+34);
    jj_consume_token(EQUAL);
        OperatorStack.push(token.kind);
    MEGAEXPRESION();
         if(!OperatorStack.isEmpty()){
             if (OperatorStack.peek() == 29){
                 opDer = OperandStack.pop();
                 tyDer = TypeStack.pop();
                 opIzq = OperandStack.pop();
                 tyIzq = TypeStack.pop();
                 opOPerator = OperatorStack.pop();
                 if(tyIzq == tyDer){
                      cuadActual.CuadruploSetIzqRes(token.beginLine,opOPerator-17,opDer,opIzq);
                      cuadruplosArr.add(cuadActual);
                 }
             }
         }
    jj_consume_token(SEMICOLON);
  }

  static final public void MEGAEXPRESION() throws ParseException {
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
    EXPRESION();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
    case AND:
      if (jj_2_5(2)) {
        jj_consume_token(AND);
            OperatorStack.push(token.kind);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          jj_consume_token(OR);
            OperatorStack.push(token.kind);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      EXPRESION();
       if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
           if (OperatorStack.peek() == 27 || OperatorStack.peek() == 28)
           {
               opDer = OperandStack.pop();
               tyDer = TypeStack.pop();
               opIzq = OperandStack.pop();
               tyIzq = TypeStack.pop();
               opOPerator = OperatorStack.pop();
               tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
               if(tyRes != -1){
                   if(tyRes == 0){
                       opRes = memTemporal.asignacionMemoriaEntera(0);
                       OperandStack.push(opRes);
                    }
                    if(tyRes == 1){
                       opRes = memTemporal.asignacionMemoriaFlotante(0);
                       OperandStack.push(opRes);
                    }
                    cuadActual.CuadruploSetComplete(token.beginLine,opOPerator-17,opIzq,opDer,opRes);
                    cuadruplosArr.add(cuadActual);
                    TypeStack.add(tyRes+34);
               }
           }
       }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  static final public void EXPRESION() throws ParseException {
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
    EXP();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case LTE:
    case LT:
    case GTE:
    case GT:
    case DFT:
      EXPRESION_AUX();
      EXP();
         if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
             if (OperatorStack.peek() >= 21 && OperatorStack.peek() <= 26)
             {
                 opDer = OperandStack.pop();
                 tyDer = TypeStack.pop();
                 opIzq = OperandStack.pop();
                 tyIzq = TypeStack.pop();
                 opOPerator = OperatorStack.pop();
                 tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
                 if(tyRes != -1){
                     if(tyRes == 0){
                         opRes = memTemporal.asignacionMemoriaEntera(0);
                         OperandStack.push(opRes);
                      }
                      if(tyRes == 1){
                         opRes = memTemporal.asignacionMemoriaFlotante(0);
                         OperandStack.push(opRes);
                      }
                      cuadActual.CuadruploSetComplete(token.beginLine,opOPerator-17,opIzq,opDer,opRes);
                      cuadruplosArr.add(cuadActual);
                      TypeStack.add(tyRes+34);
                 }
             }
         }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void EXPRESION_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
             OperatorStack.push(token.kind);
      break;
    case GT:
      jj_consume_token(GT);
               OperatorStack.push(token.kind);
      break;
    case DFT:
      jj_consume_token(DFT);
                OperatorStack.push(token.kind);
      break;
    case EQ:
      jj_consume_token(EQ);
               OperatorStack.push(token.kind);
      break;
    case GTE:
      jj_consume_token(GTE);
                OperatorStack.push(token.kind);
      break;
    case LTE:
      jj_consume_token(LTE);
                OperatorStack.push(token.kind);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void EXP() throws ParseException {
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
    TERMINO();
    if (jj_2_6(3)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDITION:
        jj_consume_token(ADDITION);
        OperatorStack.push(token.kind);
        break;
      case SUBSTRACTION:
        jj_consume_token(SUBSTRACTION);
        OperatorStack.push(token.kind);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      EXP();
    } else {
      ;
    }
     if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
         if (OperatorStack.peek() == 17 || OperatorStack.peek() == 18)
         {
             opDer = OperandStack.pop();
             tyDer = TypeStack.pop();
             opIzq = OperandStack.pop();
             tyIzq = TypeStack.pop();
             opOPerator = OperatorStack.pop();
             tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
             if(tyRes != -1){
                 if(tyRes == 0){
                     opRes = memTemporal.asignacionMemoriaEntera(0);
                     OperandStack.push(opRes);
                  }
                  if(tyRes == 1){
                     opRes = memTemporal.asignacionMemoriaFlotante(0);
                     OperandStack.push(opRes);
                  }
                  cuadActual.CuadruploSetComplete(token.beginLine,opOPerator-17,opIzq,opDer,opRes);
                  cuadruplosArr.add(cuadActual);
                  TypeStack.add(tyRes+34);
             }
         }
     }
  }

  static final public void TERMINO() throws ParseException {
//operador DERECHA, operador IZQUIERDA, tipo DERECHA, tipo IZQUIERDA, tipo RESPUESTA, operador RESPUESTA
int opDer, opIzq, opOPerator, tyDer, tyIzq, tyRes = 8,opRes =0;
Cuadruplo cuadActual = new Cuadruplo();
    FACTOR();
        if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
            if (OperatorStack.peek() == 19 || OperatorStack.peek() == 20){
                opDer = OperandStack.pop();
                tyDer = TypeStack.pop();
                opIzq = OperandStack.pop();
                tyIzq = TypeStack.pop();
                opOPerator = OperatorStack.pop();
                tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
                if(tyRes != -1){
                    if(tyRes == 0){
                        opRes = memTemporal.asignacionMemoriaEntera(0);
                        OperandStack.push(opRes);
                     }
                     if(tyRes == 1){
                        opRes = memTemporal.asignacionMemoriaFlotante(0);
                        OperandStack.push(opRes);
                     }
                     cuadActual.CuadruploSetComplete(token.beginLine,opOPerator-17,opIzq,opDer,opRes);
                     cuadruplosArr.add(cuadActual);
                     TypeStack.add(tyRes+34);
                }
            }
        }
    if (jj_2_7(3)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICATION:
        jj_consume_token(MULTIPLICATION);
        OperatorStack.push(token.kind);
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
        OperatorStack.push(token.kind);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      TERMINO();
    } else {
      ;
    }
  }

  static final public void FACTOR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPHARENTESIS:
      jj_consume_token(LPHARENTESIS);
        OperatorStack.push(token.kind);
      MEGAEXPRESION();
      jj_consume_token(RPHARENTESIS);
        OperatorStack.pop();
      break;
    case SUBSTRACTION:
    case cte_i:
    case cte_f:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUBSTRACTION:
        jj_consume_token(SUBSTRACTION);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      VARCTE();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void VARCTE() throws ParseException {
Objeto var = new Objeto();
int opIzq,opRes = 0, tyRes = 8;
Cuadruplo cuadVer = new Cuadruplo();
Cuadruplo cuadActual = new Cuadruplo();
String id;
boolean end = false;
    if (jj_2_8(3)) {
      id = LLAMADA_FUNC();
            int type = 0, dir = 0;
            for(int i = 0; i < listaFunciones.size() && !end; i++){
            if(listaFunciones.get(i).getId().equalsIgnoreCase(id)){
                dir = 23;
                type = listaFunciones.get(i).getReturn_type();
                end = true;
            }
        }
        OperandStack.push(dir);
        TypeStack.push(type+34);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
            var = search(token.image);
            OperandStack.push(var.getDireccion());
        TypeStack.push(var.getType()+34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          jj_consume_token(LBRACKET);
        OperatorStack.push(token.kind);
          EXP();
          jj_consume_token(RBRACKET);
         OperatorStack.pop();
         opIzq = OperandStack.pop();
         tyRes = var.getType();
         if(tyRes == 0){
             opRes = memTemporal.asignacionMemoriaEntera(0);
          }
          if(tyRes == 1){
             opRes = memTemporal.asignacionMemoriaFlotante(0);
          }
         cuadVer.CuadruploSetComplete(token.beginLine,20,opIzq,0,var.getSize());
         cuadruplosArr.add(cuadVer);
         cuadActual.CuadruploSetComplete(token.beginLine,0,opIzq,var.getDireccion(),opRes);
         cuadruplosArr.add(cuadActual);
         OperandStack.push(opRes);
         TypeStack.add(tyRes+34);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        break;
      case cte_i:
        jj_consume_token(cte_i);
        OperandStack.push(memConstante.asignacionMemoriaEntera(Integer.parseInt(token.image)));
        TypeStack.push(token.kind);
        break;
      case cte_f:
        jj_consume_token(cte_f);
        OperandStack.push(memConstante.asignacionMemoriaFlotante(Float.parseFloat(token.image)));
        TypeStack.push(token.kind);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void CONDICION() throws ParseException {
    Cuadruplo cuadActual = new Cuadruplo();
    jj_consume_token(IF);
    jj_consume_token(LPHARENTESIS);
    MEGAEXPRESION();
    jj_consume_token(RPHARENTESIS);
        cuadActual.CuadruploSetIzqRes(token.beginLine,18,OperandStack.pop(),-1);
        JumpStack.push(cuadruplosArr.size());
        cuadruplosArr.add(cuadActual);
    BLOQUE();
        cuadruplosArr.get(JumpStack.pop()).setiResultado(cuadruplosArr.size()+1);
    CONDICION_AUX();
  }

  static final public void CONDICION_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
        Cuadruplo cuadActual = new Cuadruplo();
        cuadActual.CuadruploSetIzqRes(token.beginLine,17,-1,-1);
        PendingGOTOStack.push(cuadruplosArr.size());
        cuadruplosArr.add(cuadActual);
      jj_consume_token(ELSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        CONDICION();
        break;
      default:
        jj_la1[13] = jj_gen;
        BLOQUE();
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
            int pendingPos = PendingGOTOStack.pop();
        Cuadruplo cuadAux = cuadruplosArr.get(pendingPos);
        cuadAux.setiResultado(cuadruplosArr.size());
        cuadruplosArr.set(pendingPos, cuadAux);
  }

  static final public void CICLO() throws ParseException {
Cuadruplo cuadGotof = new Cuadruplo();
Cuadruplo cuadGoto = new Cuadruplo();
    jj_consume_token(WHILE);
            JumpStack.push(cuadruplosArr.size());
    jj_consume_token(LPHARENTESIS);
    MEGAEXPRESION();
    jj_consume_token(RPHARENTESIS);
            cuadGotof.CuadruploSetIzqRes(token.beginLine,18,OperandStack.pop(),-1);
        JumpStack.push(cuadruplosArr.size());
        cuadruplosArr.add(cuadGotof);
    BLOQUE();
        cuadruplosArr.get(JumpStack.pop()).setiResultado(cuadruplosArr.size()+1);
        cuadGoto.CuadruploSetIzqRes(token.beginLine,17,-1,JumpStack.pop());
        cuadruplosArr.add(cuadGoto);
  }

  static final public void VARS() throws ParseException {
    TIPO();
            //Indica el tipo del siguiente conjunto de variables
            tipo = token.kind-6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VECTOR:
      VARS_AUX1();
      break;
    case ID:
      VARS_AUX2();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void VARS_AUX1() throws ParseException {
Token identificador;            //El nombre de la variable
Objeto var = new Objeto();   //La variable con tipo y valor
int iCuadAntes;
int iSize;
    jj_consume_token(VECTOR);
    identificador = jj_consume_token(ID);
    jj_consume_token(LBRACKET);
        var.setbDim(true);
        iCuadAntes = cuadruplosArr.size();
    MEGAEXPRESION();
        if(iCuadAntes != cuadruplosArr.size()){
            iSize= memConstante.accesoMemoriaEntera((cuadruplosArr.get(cuadruplosArr.size()).getiResultado()));
        }
        else{
            iSize = memConstante.accesoMemoriaEntera(OperandStack.pop());
        }
    jj_consume_token(RBRACKET);
        var.setId(identificador.image);
        var.setType(tipo);
        if(tipo == 0){
            var.setDireccion(memGlobal.asignacionMemoriaEnteraDim(0,iSize));
            var.setbDim(true);
            var.setSize(iSize);
            decl(identificador,var);
        }
        if(tipo== 1){
            var.setDireccion(memGlobal.asignacionMemoriaFlotanteDim(0,iSize));
            var.setbDim(true);
            var.setSize(iSize);
            decl(identificador,var);
           }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
                    OperandStack.push(var.getDireccion());
                      TypeStack.push(var.getType()+34);
                      OperatorStack.push(token.kind);
      jj_consume_token(LKEY);
      VARS_AUX1_1();
      jj_consume_token(RKEY);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  static final public void VARS_AUX1_1() throws ParseException {
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
    MEGAEXPRESION();
       if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
           if (OperatorStack.peek() == 29)
           {
               opDer = OperandStack.pop();
               tyDer = TypeStack.pop();
               opIzq = OperandStack.pop();
               tyIzq = TypeStack.pop();
               opOPerator = OperatorStack.pop();
               if(tyIzq == tyDer){
                    cuadActual.CuadruploSetIzqRes(token.beginLine,opOPerator-17,opDer,opIzq);
                    cuadruplosArr.add(cuadActual);
               }
           }
       }
    label_3:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(COMA);
      VARS_AUX1_1();
    }
  }

  static final public void VARS_AUX2() throws ParseException {
Token identificador;            //El nombre de la variable
Objeto var = new Objeto();   //La variable con tipo y valor
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
    identificador = jj_consume_token(ID);
            var.setId(identificador.image);
            var.setType(tipo);
            if(tipo == 0){
                var.setDireccion(memGlobal.asignacionMemoriaEntera(0));
                decl(identificador,var);
            }
            if(tipo== 1){
                var.setDireccion(memGlobal.asignacionMemoriaFlotante(0));
                decl(identificador,var);
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
            OperandStack.push(var.getDireccion());
        TypeStack.push(var.getType()+34);
        OperatorStack.push(token.kind);
      MEGAEXPRESION();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
        if(!OperatorStack.isEmpty()){
            if (OperatorStack.peek() == 29)
            {
                opDer = OperandStack.pop();
                tyDer = TypeStack.pop();
                opIzq = OperandStack.pop();
                tyIzq = TypeStack.pop();
                opOPerator = OperatorStack.pop();
                if(tyIzq == tyDer){
                     cuadActual.CuadruploSetIzqRes(token.beginLine,opOPerator-17,opDer,opIzq);
                     cuadruplosArr.add(cuadActual);
                }
            }
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      jj_consume_token(COMA);
      VARS_AUX2();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  static final public void MODULO() throws ParseException {
    Function function = new Function();
    Cuadruplo cuadActual = new Cuadruplo();
    contextoNum++;
    cuadActual.CuadruploSetIzqRes(cuadruplosArr.size(),19,-1,contextoNum);
    cuadruplosArr.add(cuadActual);
    int start = cuadruplosArr.size()-1;
    listaContextos.add(new TablaVariables());
    listaFunciones.add(function);
    Token identificador;
    MODULO_TIPO();
            listaFunciones.get(listaFunciones.size()-1).setReturn_type(token.kind-6);
    identificador = jj_consume_token(ID);
            if(identificador.image.equalsIgnoreCase("main")){
                int pendingPos = PendingGOTOStack.pop();
                Cuadruplo cuadAux = cuadruplosArr.get(pendingPos);
                cuadAux.setiResultado(cuadruplosArr.size()-1);
            cuadruplosArr.set(pendingPos, cuadAux);
            }

            listaFunciones.get(listaFunciones.size()-1).setId(identificador.image);
    jj_consume_token(LPHARENTESIS);
    MODULO_AUX();
    jj_consume_token(RPHARENTESIS);
            listaFunciones.get(listaFunciones.size()-1).setFuncStart(start);
    BLOQUE();
            cuadActual = new Cuadruplo();
            cuadActual.CuadruploSetRes(token.beginLine,23,-1);
            cuadruplosArr.add(cuadActual);
  }

  static final public void MODULO_TIPO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case VECTOR:
      jj_consume_token(VECTOR);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void MODULO_AUX() throws ParseException {
Objeto var = new Objeto();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:
      TIPO();
            var.setType(token.kind-6);
            listaFunciones.get(listaFunciones.size()-1).addParams_Types(token.kind-6);
      jj_consume_token(ID);
            if(var.getType() == 0){
                var.setDireccion(memLocal.asignacionMemoriaEntera(0));
            }else if (var.getType() == 1){
                var.setDireccion(memLocal.asignacionMemoriaFlotante(0));
            }else{
                var.setDireccion(memLocal.asignacionMemoriaChar(new char[]{'0'}));
            }

            var.setId(token.image);
            decl(token, var);
            listaFunciones.get(listaFunciones.size()-1).addParams_list(var.getDireccion());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        jj_consume_token(COMA);
        MODULO_AUX();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  static final public void RETORNO() throws ParseException {
    Cuadruplo cuadActual = new Cuadruplo();
    int dir = 0;
    jj_consume_token(RETURN);
    if (jj_2_10(3)) {
      VARCTE();
            if(token.kind-34 == 0){
                if(listaFunciones.get(listaFunciones.size()-1).getReturn_type() == 0){
                dir = memLocal.asignacionMemoriaEntera(Integer.parseInt(token.image));
                }else{
                listaErrores.add("Error found At line "+token.beginLine+", column "+token.beginColumn+"\u005cn unexpected return type.");
                }
            }else{
                if(listaFunciones.get(listaFunciones.size()-1).getReturn_type() == 1){
                dir = memLocal.asignacionMemoriaFlotante(Float.parseFloat(token.image));
            }else{
                listaErrores.add("Error found At line "+token.beginLine+", column "+token.beginColumn+"\u005cn unexpected return type.");
            }
            }
        cuadActual.CuadruploSetRes(token.beginLine,15,dir);
        cuadruplosArr.add(cuadActual);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUBSTRACTION:
      case LPHARENTESIS:
      case cte_i:
      case cte_f:
      case ID:
        EXP();
        dir = OperandStack.pop();
        cuadActual.CuadruploSetRes(token.beginLine,15,dir);
        cuadruplosArr.add(cuadActual);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
  }

  static final public String LLAMADA_FUNC() throws ParseException {
Cuadruplo cuadActual = new Cuadruplo();
Token identificador;
int dir = 0;
    identificador = jj_consume_token(ID);
            int i;
            boolean end = false;
            for(i = 0; i < listaFunciones.size() && !end; i++){
            if(listaFunciones.get(i).getId().equalsIgnoreCase(identificador.image)){
                dir = listaFunciones.get(i).getFuncStart();
                end = true;
            }
        }
        cuadActual.CuadruploSetRes(token.beginLine,14,i-1);
        cuadruplosArr.add(cuadActual);
    jj_consume_token(LPHARENTESIS);
    LLAMADA_AUX();
    jj_consume_token(RPHARENTESIS);
            cuadActual = new Cuadruplo();
            cuadActual.CuadruploSetRes(token.beginLine,21,dir);
            cuadruplosArr.add(cuadActual);

            {if (true) return identificador.image;}
    throw new Error("Missing return statement in function");
  }

  static final public void LLAMADA_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUBSTRACTION:
    case LPHARENTESIS:
    case cte_i:
    case cte_f:
    case ID:
      LLAMADA_PARAM();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        jj_consume_token(COMA);
        LLAMADA_AUX();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  static final public void LLAMADA_PARAM() throws ParseException {
    Cuadruplo cuadActual = new Cuadruplo();
    EXP();
        int opRes = OperandStack.pop();
        cuadActual.CuadruploSetRes(token.beginLine,16,opRes);
        cuadruplosArr.add(cuadActual);
  }

  static final public void TIPO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ESCRITURA() throws ParseException {
printConsole = "";
    jj_consume_token(PRINT);
    jj_consume_token(LPHARENTESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cte_s:
      ESCRITURA_AUX();
      break;
    case SUBSTRACTION:
    case LPHARENTESIS:
    case cte_i:
    case cte_f:
    case ID:
      ESCRITURA_AUX2();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPHARENTESIS);
    jj_consume_token(SEMICOLON);
                                                                                                printConsoleArr.add(printConsole);
  }

  static final public void ESCRITURA_AUX() throws ParseException {
Cuadruplo cuadActual = new Cuadruplo();
int opRes;
    jj_consume_token(cte_s);
            String aux = token.image;
            aux = aux.substring(1);
            aux = aux.substring(0, aux.length()-1);
            //printConsole += aux;

            opRes = memTemporal.asignacionMemoriaChar(aux.toCharArray());
            cuadActual.CuadruploSetRes(token.beginLine, 13, opRes);
            cuadruplosArr.add(cuadActual);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADDITION:
      jj_consume_token(ADDITION);
      ESCRITURA_AUX2();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  static final public void ESCRITURA_AUX2() throws ParseException {
Cuadruplo cuadActual = new Cuadruplo();
int cuadSize = cuadruplosArr.size(), opRes;
    EXP();
        if(cuadSize == cuadruplosArr.size()){
            Objeto var = search(token.image);
            cuadActual.CuadruploSetRes(token.beginLine, 13, var.getDireccion());
        }else{
            opRes = cuadruplosArr.get(cuadruplosArr.size()).getiResultado();
            cuadActual.CuadruploSetRes(token.beginLine, 13, opRes);
        }
        cuadruplosArr.add(cuadActual);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADDITION:
      jj_consume_token(ADDITION);
      ESCRITURA_AUX();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_3R_29() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(cte_i)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPHARENTESIS)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPHARENTESIS)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(COMA)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(VECTOR)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(SUBSTRACTION)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_12()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(ADDITION)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    }
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(LPHARENTESIS)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(DIVISION)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(MULTIPLICATION)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(LKEY)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(cte_f)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public compiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xbc0,0x5f4,0x434,0x8000000,0x18000000,0x7e00000,0x7e00000,0x60000,0x180000,0x40000,0x40040000,0x1000,0x0,0x4,0x8,0x200,0x20000000,0x20000000,0x0,0xbc0,0x0,0x1c0,0x40040000,0x0,0x40040000,0x1c0,0x40040000,0x20000,0x20000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c,0x0,0x2c,0x0,0x0,0x20,0x0,0x0,0x1,0x0,0x1,0x0,0x2c,0x1,0x2c,0x0,0x3c,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[10];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public compilador(compiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(compiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
