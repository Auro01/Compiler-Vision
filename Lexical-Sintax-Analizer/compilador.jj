PARSER_BEGIN(compilador)
import java.io.*;
import java.util.*;
class compilador
{
    private static String printConsole;
    private static int tipo = 0;       //La variable indica el tipo de las siguientes variables declaradas en el renglón

    //Todas las funciones se guardán aqui en dferentes espacios (contextos) que contendras los contextos locales
    private static Vector<TablaVariables> listaContextos = new Vector<TablaVariables>();
    private static ArrayList<String> listaErrores = new ArrayList<String>();    //Todos los errores se imprimen después de compilación
    private static ArrayList<String> printConsoleArr = new ArrayList<String>();    //Esta lista se imprime en consola con el comando print al finalizar la compilación
    public static CuboSemantico cuboSemantico = new CuboSemantico();

    public static void main( String[] args )throws ParseException, Exception
	{
		try
		{		
     		compilador analizador = new compilador( System.in ) ;
			analizador.Programa();
			for(int i = 0; i < listaErrores.size(); i++){
			    System.out.println(listaErrores.get(i));
			}
			if(listaErrores.size()<1){
			    for(int i = 0; i < printConsoleArr.size(); i++){
                    System.out.println(printConsoleArr.get(i));
                }
                System.out.println("\n\tBuild Sucessful");
			}else{
			System.out.println("\n"+listaErrores.size()+" errors.");
			}
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("\n\tErrors found.");
		}
	}
}
PARSER_END(compilador)

//palabras reservadas
TOKEN:
{
	<PROGRAM: "Program" >   //1
	| <IF: "if" >           //2
	| <ELSE: "else" >       //3
	| <WHILE: "while" >     //4
	| <PRINT: "print" >     //5
	| <INT: "int" >         //6
	| <FLOAT: "float" >     //7
	| <CHAR: "char" >       //8
	| <VECTOR: "vector" >   //9
	| <RETURN: "return" >   //10
	| <VOID: "void">        //11
	| <LBRACKET: "[">       //12
	| <RBRACKET: "]">       //13
	| <LKEY: "{">           //14
    | <RKEY: "}">           //15
	| <SEMICOLON: ";">      //17
	| <ADDITION: "+">       //18
	| <SUBSTRACTION: "-">   //19
	| <DIVISION: "/">       //20
	| <MULTIPLICATION: "*"> //21
	| <GT: ">">             //22
	| <LT: "<">             //23
	| <EQ: "==">            //24
	| <GTE: ">=">           //25
	| <LTE: "<=">           //26
	| <DFT: "!">            //27
	| <AND: "&&">           //28
	| <OR: "||">            //29
	| <LPHARENTESIS: "(">   //30
	| <RPHARENTESIS: ")">   //31
	| <COMA: ",">           //32
	| <QUOTE: "\"">         //33
	| <EQUAL: "=">          //34
}

//expresiones regulares para variables
TOKEN:
{
	<cte_i: ( ["0"-"9"] )+ >                                            //35    int
	|<cte_f: ( ["0"-"9"] )+("."(["0"-"9"])+)?  >                        //36    float
	|<cte_s: ("\"")(~["\r","\""])+("\"")>                               //37    string
	|<ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )*>     //39    id
	 
}

SKIP:
{
	" " | "\n" | "\r" | "\r\n" | "\t" | <"//"(~["\n","\r"])*("\n" | "\r" | "\r\n")> //omite los saltos de linea, espacios en blanco, tabulaciones y comentarios
}

void Programa():
{
listaContextos.addElement(new TablaVariables());
}
{
	<PROGRAM> <ID> <SEMICOLON> (LOOKAHEAD(3) VARS())* (MODULO())* BLOQUE() <EOF>
}

void BLOQUE():
{}
{
	(LOOKAHEAD(2) <LKEY> BLOQUE_AUX() <RKEY>)?
}

void BLOQUE_AUX():
{}
{
	ESTATUTO() (BLOQUE_AUX())?
}

void ESTATUTO():
{}
{
	LOOKAHEAD(3) VARS() | LOOKAHEAD(3) ASIGNACION() | CONDICION() | ESCRITURA() | CICLO() | LLAMADA_FUNC() | RETORNO()

}

void ASIGNACION():
{
Objeto var;
Token identificador;
}
{
    identificador = <ID> <EQUAL> var = EXP() <SEMICOLON>{
        boolean error = true;

        int i = 0;
        //Realiza una busqueda del contexto global al local
        for(i = 0; i < listaContextos.size() && error; i++){
            if(listaContextos.get(i).obtenerVar(identificador.image)!=null){
                listaContextos.get(i).actualizarVar(identificador.image, var);
                error=false;
            }
        }

        if(error)listaErrores.add("Error found At line "+identificador.beginLine+", column "+identificador.beginColumn+"\n   variable '"+identificador.image+"' has not been declared.");
    }
}

void MEGAEXPRESION():
{}
{
	EXPRESION() ((<AND> | <OR>) EXPRESION())?
}

void EXPRESION():
{}
{
	EXP() (EXPRESION_AUX() EXP())?
}

void EXPRESION_AUX():
{}
{
	<LT> | <GT> | <DFT> | <EQ> | <GTE> | <LTE>
}

Objeto EXP():
{}
{
	TERMINO() (LOOKAHEAD(3) (<ADDITION>
	| <SUBSTRACTION>) EXP())? {
        if(tipo == 0){return new Objeto(0,Integer.parseInt(token.image));}
        else{return new Objeto(1,Float.parseFloat(token.image));}
	}
}

void TERMINO():
{}
{
	FACTOR() (LOOKAHEAD(3) TERMINO_AUX() TERMINO())?
}

void TERMINO_AUX():
{}
{
	<MULTIPLICATION> | <DIVISION>
}

void FACTOR():
{}
{
	<LPHARENTESIS> MEGAEXPRESION() <RPHARENTESIS> | (<SUBSTRACTION>)? VARCTE()
}

Objeto VARCTE():
{
int i=0;
}
{
	<ID>{
	    //Looks for the variable on local and global context
	    boolean error = true;
	    //Realiza una busqueda del contexto global al local
	    for(i = 0; i < listaContextos.size() && error; i++){
	        if(listaContextos.get(i).obtenerVar(token.image)!=null){
	            tipo = listaContextos.get(i).obtenerVar(token.image).getType();
	            token.image = listaContextos.get(i).obtenerVar(token.image).getValue().toString();
                error=false;
	        }
	    }

        if(error){
            listaErrores.add("Error found At line "+token.beginLine+", column "+token.beginColumn+"\n   variable '"+token.image+"' was not found.");
            token.image = "0";
        }
	}(<LBRACKET> EXP() <RBRACKET>)? {return listaContextos.get(i-1).obtenerVar(token.image);} | <cte_i> {return new Objeto();} | <cte_f> {return new Objeto();}
}

void CONDICION():
{}
{
	{listaContextos.addElement(new TablaVariables());} <IF> <LPHARENTESIS> MEGAEXPRESION() <RPHARENTESIS> BLOQUE() CONDICION_AUX() {listaContextos.remove(listaContextos.lastElement());}
}

void CONDICION_AUX():
{}
{
	(<ELSE> (CONDICION() | BLOQUE()))?
}

void CICLO():
{}
{
	{listaContextos.addElement(new TablaVariables());} <WHILE> <LPHARENTESIS> MEGAEXPRESION() <RPHARENTESIS> BLOQUE() {listaContextos.remove(listaContextos.lastElement());}
}

void VARS():
{}
{
	TIPO(){
	    //Indica el tipo del siguiente conjunto de variables
	    tipo = token.kind-6;
	}(VARS_AUX1() | VARS_AUX2()) <SEMICOLON>
}

void VARS_AUX1():
{
//TODO Trabajar en el manejo de vectores
}
{
	<VECTOR> <ID> <LBRACKET> EXP() <RBRACKET> (<EQUAL> <LKEY> VARS_AUX1_1() <RKEY>)?
}

void VARS_AUX1_1():
{}
{
	EXP() (LOOKAHEAD(2) <COMA> VARS_AUX1_1())*
}
void VARS_AUX2():
{
Token identificador;            //El nombre de la variable
Objeto var = new Objeto(0,0);   //La variable con tipo y valor
}
{
	identificador = <ID> (<EQUAL> var = EXP())? {
	    var.setType(tipo);
        boolean noVar = false;

        if(var.getStatus().equals("ok")){
            int i = 0;

            //Busca de contexto global a local si la variable existe
            for(i = 0; i < listaContextos.size(); i++){
                if(listaContextos.get(i).obtenerVar(identificador.image)!=null){
                    noVar=true;
                }
            }

            if(!noVar){
                listaContextos.lastElement().insertarVar(identificador.image, var);
            }
        }

        if(noVar){
            listaErrores.add("Error found At line "+identificador.beginLine+", column "+identificador.beginColumn+"\n   variable '"+identificador.image+"' was already declared at this scope.");
        }
	}
	(<","> VARS_AUX2())?
}

void MODULO():
{
    listaContextos.addElement(new TablaVariables());
}
{
	MODULO_TIPO() <ID> <LPHARENTESIS> MODULO_AUX() <RPHARENTESIS> BLOQUE()
}

void MODULO_TIPO():
{}
{
	<VOID> | <INT> | <FLOAT> | <CHAR> | <VECTOR>
}

void MODULO_AUX():
{}
{
	(TIPO() <ID> (<COMA> MODULO_AUX())?)?
}

void RETORNO():
{}
{
	<RETURN> (LOOKAHEAD(3) VARCTE() | EXP()) <SEMICOLON>
}

void LLAMADA_FUNC():
{}
{
	<ID> <LPHARENTESIS> LLAMADA_AUX() <RPHARENTESIS> <SEMICOLON>
}

void LLAMADA_AUX():
{}
{
	(LLAMADA_PARAM() (<COMA> LLAMADA_AUX())?)?
}

void LLAMADA_PARAM():
{}
{
	LOOKAHEAD(3) <ID> | EXP()
}

void TIPO():
{}
{
	<INT> | <FLOAT> | <CHAR> 
}

void ESCRITURA():
{
printConsole = "";
}
{
	<PRINT> <LPHARENTESIS> (ESCRITURA_AUX() | ESCRITURA_AUX2()) <RPHARENTESIS> <SEMICOLON> {printConsoleArr.add(printConsole);}
}

void ESCRITURA_AUX():
{}
{
	<cte_s>{
	    String aux = token.image;
	    aux = aux.substring(1);
	    aux = aux.substring(0, aux.length()-1);
	    printConsole += aux;
	}
	(<ADDITION> ESCRITURA_AUX2())?
}

void ESCRITURA_AUX2():
{
Objeto var;
}
{
    var = EXP() {printConsole += var.getValue().toString();} (<ADDITION> ESCRITURA_AUX())?
}
