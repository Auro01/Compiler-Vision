PARSER_BEGIN(compilador)
import java.io.*;
import java.util.*;
class compilador
{
    //Beware those who seek the seecret wich lie within for once you start debugging youl never be the same...
    private static String printConsole;
    private static int tipo = 0;       //La variable indica el tipo de las siguientes variables declaradas en el renglón
    private static Vector<Objeto> varTemporal = new Vector<Objeto>();

    //Todas las funciones se guardán aqui en dferentes espacios (contextos) que contendran los contextos locales
    private static Vector<TablaVariables> listaContextos = new Vector<TablaVariables>();
    private static int contextoNum = -1; //Esta variable apunta a la tabla de contexto actual y se usa para generar el cuadruplo que maneja el apuntador al contexto actual
    private static Vector<Function> listaFunciones = new Vector<Function>();

    private static ArrayList<String> listaErrores = new ArrayList<String>();    //Todos los errores se imprimen después de compilación
    private static ArrayList<String> printConsoleArr = new ArrayList<String>(); //Esta lista se imprime en consola con el comando print al finalizar la compilación

    //En este arreglo se guarda cada cuadruplo a medida que se compila el programa, al final se ejecutaran todos los cuadruplos en orden
    public static ArrayList<Cuadruplo> cuadruplosArr = new ArrayList<Cuadruplo>();
    public static CuboSemantico cuboSemantico = new CuboSemantico();

    public static Stack<Integer> OperandStack = new Stack<Integer>();
    public static Stack<Integer> OperatorStack = new Stack<Integer>();
    public static Stack<Integer> TypeStack = new Stack<Integer>();
    public static Stack<Integer> JumpStack = new Stack<Integer>();
    public static Stack<Integer> ReturnStack = new Stack<Integer>();
    public static Stack<Integer> PendingGOTOStack = new Stack<Integer>();

    private static Memoria memGlobal = new Memoria(10000,20000);
    private static Memoria memLocal = new Memoria(20000,30000);
    private static Memoria memTemporal = new Memoria(30000,40000);
    private static Memoria memConstante = new Memoria(40000,50000);

    private static void asign(Token identificador, Objeto var){
        boolean error = true;

        int i = 0;
        //Realiza una busqueda del contexto global al local
        for(i = 0; i < listaContextos.size() && error; i++){
            if(listaContextos.get(i).obtenerVar(identificador.image)!=null){
                listaContextos.get(i).actualizarVar(identificador.image, var);
                error = false;
            }
        }

        if(error)listaErrores.add("Error found At line "+identificador.beginLine+", column "+identificador.beginColumn+"\n   variable '"+identificador.image+"' has not been declared.");
    }

    private static Objeto search(String id){
        int i = 0;
        //Realiza una busqueda en el contexto global y local
        if(listaContextos.get(listaContextos.size()-1).obtenerVar(id)!=null){
            return listaContextos.get(listaContextos.size()-1).obtenerVar(id);
        }else if(listaContextos.get(0).obtenerVar(id)!=null){
            return listaContextos.get(0).obtenerVar(id);
        }

        listaErrores.add("Error found At line "+token.beginLine+", column "+token.beginColumn+"\n   variable '"+id+"' was not found.");
        token.image = "0";

        return new Objeto();
    }

    public static void decl(Token identificador, Objeto var){
        var.setType(tipo);
        boolean noVar = false;

        if(var.getStatus().equals("ok")){
            int i = 0;

            //Busca en el contexto global y local si la variable existe
            if(listaContextos.get(listaContextos.size()-1).obtenerVar(identificador.image)!=null || listaContextos.get(0).obtenerVar(identificador.image)!=null){
                noVar=true;
            }

            if(!noVar){
                listaContextos.lastElement().insertarVar(identificador.image, var);
            }
        }

        if(noVar){
            listaErrores.add("Error found At line "+identificador.beginLine+", column "+identificador.beginColumn+"\n   variable '"+identificador.image+"' was already declared at this scope.");
        }
    }

    public static int accesoMemoriaEntero(int valor){
            if(valor>=memGlobal.getiInicioMem() && valor<memGlobal.getiFinMem()){
                return memGlobal.accesoMemoriaEntera(valor);
            }
            if(valor>=memLocal.getiInicioMem() && valor<memLocal.getiFinMem()){
                 return memLocal.accesoMemoriaEntera(valor);
            }
            if(valor>=memTemporal.getiInicioMem() && valor<memTemporal.getiFinMem()){
                return memTemporal.accesoMemoriaEntera(valor);
            }
            if(valor>=memConstante.getiInicioMem() && valor<memConstante.getiFinMem()){
                return memConstante.accesoMemoriaEntera(valor);
            }
            return -1;
        }

        public static float accesoMemoriaFlotante(int valor){
                valor= valor - 5000;
                if(valor>=memGlobal.getiInicioMem() && valor<memGlobal.getiFinMem()){
                    return memGlobal.accesoMemoriaFlotante(valor);
                }
                if(valor>=memLocal.getiInicioMem() && valor<memLocal.getiFinMem()){
                     return memLocal.accesoMemoriaFlotante(valor);
                }
                if(valor>=memTemporal.getiInicioMem() && valor<memTemporal.getiFinMem()){
                    return memTemporal.accesoMemoriaFlotante(valor);
                }
                if(valor>=memConstante.getiInicioMem() && valor<memConstante.getiFinMem()){
                    return memConstante.accesoMemoriaFlotante(valor);
                }
                return -1;
            }

        public static void actualizarMemoriaEntero(int valor, int direccion){
                if(direccion>=memGlobal.getiInicioMem() && direccion<memGlobal.getiFinMem()){
                  memGlobal.actualizacionMemoriaEntera(valor,direccion);
                }
                if(direccion>=memLocal.getiInicioMem() && direccion<memLocal.getiFinMem()){
                    memLocal.actualizacionMemoriaEntera(valor,direccion);
                }
                if(direccion>=memTemporal.getiInicioMem() && direccion<memTemporal.getiFinMem()){
                    memTemporal.actualizacionMemoriaEntera(valor,direccion);
                }
                if(direccion>=memConstante.getiInicioMem() && direccion<memConstante.getiFinMem()){
                    memConstante.actualizacionMemoriaEntera(valor,direccion);
                }
            }

        public static void actualizarMemoriaFlotante(float valor, int direccion){
                 direccion= direccion - 5000;
                if(direccion>=memGlobal.getiInicioMem() && direccion<memGlobal.getiFinMem()){
                    memGlobal.actualizacionMemoriaFlotante(valor,direccion);
                }
                if(direccion>=memLocal.getiInicioMem() && direccion<memLocal.getiFinMem()){
                    memLocal.actualizacionMemoriaFlotante(valor,direccion);
                }
                if(direccion>=memTemporal.getiInicioMem() && direccion<memTemporal.getiFinMem()){
                    memTemporal.actualizacionMemoriaFlotante(valor,direccion);
                }
                if(direccion>=memConstante.getiInicioMem() && direccion<memConstante.getiFinMem()){
                    memConstante.actualizacionMemoriaFlotante(valor,direccion);
                }
            }

        public static boolean isMemEntera(int value) {
        		String string = String.valueOf(value);
        		if(string.charAt(1)=='5'){
        		    return false;
        		}

            return true;
        }

        public static void maquinaVirtual(){
            boolean bEnd = false;
            Cuadruplo cuadActual = cuadruplosArr.get(0);
            int opDer,opIzq,opRes;
            float fValDer,fValIzq,fValRes;
            int iOperador;
            while(!bEnd){
                iOperador=cuadActual.getiOperador();
                switch (iOperador) {
                    case 0:
                        opIzq = cuadActual.getiIzquierda();
                        if(isMemEntera(opIzq)){
                            fValIzq = accesoMemoriaEntero(opIzq);
                        }
                        else{
                            fValIzq = accesoMemoriaFlotante(opIzq);
                        }
                        opDer = cuadActual.getiDerecha();
                        if(isMemEntera(opDer)){
                            fValDer = accesoMemoriaEntero(opDer);
                        }
                        else{
                            fValDer = accesoMemoriaFlotante(opDer);
                        }
                        opRes = cuadActual.getiResultado();
                        if(isMemEntera(opRes)){
                            actualizarMemoriaEntero((int)(fValIzq + fValDer),opRes);
                        }
                        else{
                            actualizarMemoriaFlotante(fValIzq + fValDer,opRes);
                        }
                        System.out.print(cuadActual.getiNumero() + " ");
                        System.out.println("suma " + (fValIzq + fValDer));
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 1:
                        opIzq = cuadActual.getiIzquierda();
                        if(isMemEntera(opIzq)){
                            fValIzq = accesoMemoriaEntero(opIzq);
                        }
                        else{
                            fValIzq = accesoMemoriaFlotante(opIzq);
                        }
                        opDer = cuadActual.getiDerecha();
                        if(isMemEntera(opDer)){
                            fValDer = accesoMemoriaEntero(opDer);
                        }
                        else{
                            fValDer = accesoMemoriaFlotante(opDer);
                        }
                        opRes = cuadActual.getiResultado();
                        if(isMemEntera(opRes)){
                            actualizarMemoriaEntero((int)(fValIzq - fValDer),opRes);
                        }
                        else{
                            actualizarMemoriaFlotante(fValIzq - fValDer,opRes);
                        }
                        System.out.print(cuadActual.getiNumero() + " ");
                        System.out.println("resta " + (fValIzq - fValDer));
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 2:
                        opIzq = cuadActual.getiIzquierda();
                        if(isMemEntera(opIzq)){
                            fValIzq = accesoMemoriaEntero(opIzq);
                        }
                        else{
                            fValIzq = accesoMemoriaFlotante(opIzq);
                        }
                        opDer = cuadActual.getiDerecha();
                        if(isMemEntera(opDer)){
                            fValDer = accesoMemoriaEntero(opDer);
                        }
                        else{
                            fValDer = accesoMemoriaFlotante(opDer);
                        }
                        opRes = cuadActual.getiResultado();
                        if(isMemEntera(opRes)){
                            actualizarMemoriaEntero((int)(fValIzq / fValDer),opRes);
                        }
                        else{
                            actualizarMemoriaFlotante(fValIzq / fValDer,opRes);
                        }
                        System.out.print(cuadActual.getiNumero() + " ");
                        System.out.println("div " + (fValIzq / fValDer));
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 3:
                        opIzq = cuadActual.getiIzquierda();
                        if(isMemEntera(opIzq)){
                            fValIzq = accesoMemoriaEntero(opIzq);
                        }
                        else{
                            fValIzq = accesoMemoriaFlotante(opIzq);
                        }
                        opDer = cuadActual.getiDerecha();
                        if(isMemEntera(opDer)){
                            fValDer = accesoMemoriaEntero(opDer);
                        }
                        else{
                            fValDer = accesoMemoriaFlotante(opDer);
                        }
                        opRes = cuadActual.getiResultado();
                        if(isMemEntera(opRes)){
                            actualizarMemoriaEntero((int)(fValIzq * fValDer),opRes);
                        }
                        else{
                            actualizarMemoriaFlotante(fValIzq * fValDer,opRes);
                        }
                        System.out.print(cuadActual.getiNumero() + " ");

                        System.out.println("mult " + (fValIzq * fValDer));
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 4:
                        opIzq = cuadActual.getiIzquierda();
                        if(isMemEntera(opIzq)){
                            fValIzq = accesoMemoriaEntero(opIzq);
                        }
                        else{
                            fValIzq = accesoMemoriaFlotante(opIzq);
                        }
                        opDer = cuadActual.getiDerecha();
                        if(isMemEntera(opDer)){
                            fValDer = accesoMemoriaEntero(opDer);
                        }
                        else{
                            fValDer = accesoMemoriaFlotante(opDer);
                        }
                        opRes = cuadActual.getiResultado();
                        if(fValIzq == fValDer){
                            actualizarMemoriaEntero(1,opRes);
                        }
                        else{
                            actualizarMemoriaEntero(0,opRes);
                        }
                        System.out.print(cuadActual.getiNumero() + " ");

                        System.out.println("== " + (fValIzq == fValDer));
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 5:
                        opIzq = cuadActual.getiIzquierda();
                        if(isMemEntera(opIzq)){
                            fValIzq = accesoMemoriaEntero(opIzq);
                        }
                        else{
                            fValIzq = accesoMemoriaFlotante(opIzq);
                        }
                        opDer = cuadActual.getiDerecha();
                        if(isMemEntera(opDer)){
                            fValDer = accesoMemoriaEntero(opDer);
                        }
                        else{
                            fValDer = accesoMemoriaFlotante(opDer);
                        }
                        opRes = cuadActual.getiResultado();
                        if(fValIzq <= fValDer){
                            actualizarMemoriaEntero(1,opRes);
                        }
                        else{
                            actualizarMemoriaEntero(0,opRes);
                        }
                        System.out.print(cuadActual.getiNumero() + " ");

                        System.out.println("<= " + (fValIzq <= fValDer));
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 6:
                        opIzq = cuadActual.getiIzquierda();
                        if(isMemEntera(opIzq)){
                            fValIzq = accesoMemoriaEntero(opIzq);
                        }
                        else{
                            fValIzq = accesoMemoriaFlotante(opIzq);
                        }
                        opDer = cuadActual.getiDerecha();
                        if(isMemEntera(opDer)){
                            fValDer = accesoMemoriaEntero(opDer);
                        }
                        else{
                            fValDer = accesoMemoriaFlotante(opDer);
                        }
                        opRes = cuadActual.getiResultado();
                        if(fValIzq < fValDer){
                            actualizarMemoriaEntero(1,opRes);
                        }
                        else{
                            actualizarMemoriaEntero(0,opRes);
                        }
                        System.out.print(cuadActual.getiNumero() + " ");

                        System.out.println("< " + (fValIzq < fValDer));
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 7:
                        opIzq = cuadActual.getiIzquierda();
                        if(isMemEntera(opIzq)){
                            fValIzq = accesoMemoriaEntero(opIzq);
                        }
                        else{
                            fValIzq = accesoMemoriaFlotante(opIzq);
                        }
                        opDer = cuadActual.getiDerecha();
                        if(isMemEntera(opDer)){
                            fValDer = accesoMemoriaEntero(opDer);
                        }
                        else{
                            fValDer = accesoMemoriaFlotante(opDer);
                        }
                        opRes = cuadActual.getiResultado();
                        if(fValIzq >= fValDer){
                            actualizarMemoriaEntero(1,opRes);
                        }
                        else{
                            actualizarMemoriaEntero(0,opRes);
                        }
                        System.out.print(cuadActual.getiNumero() + " ");

                        System.out.println(">= " + (fValIzq >= fValDer));
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 8:
                        opIzq = cuadActual.getiIzquierda();
                        if(isMemEntera(opIzq)){
                            fValIzq = accesoMemoriaEntero(opIzq);
                        }
                        else{
                            fValIzq = accesoMemoriaFlotante(opIzq);
                        }
                        opDer = cuadActual.getiDerecha();
                        if(isMemEntera(opDer)){
                            fValDer = accesoMemoriaEntero(opDer);
                        }
                        else{
                            fValDer = accesoMemoriaFlotante(opDer);
                        }
                        opRes = cuadActual.getiResultado();
                        if(fValIzq > fValDer){
                            actualizarMemoriaEntero(1,opRes);
                        }
                        else{
                            actualizarMemoriaEntero(0,opRes);
                        }
                        System.out.print(cuadActual.getiNumero() + " ");

                        System.out.println("> " + (fValIzq > fValDer));
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 9:
                        opIzq = cuadActual.getiIzquierda();
                        if(isMemEntera(opIzq)){
                            fValIzq = accesoMemoriaEntero(opIzq);
                        }
                        else{
                            fValIzq = accesoMemoriaFlotante(opIzq);
                        }
                        opDer = cuadActual.getiDerecha();
                        if(isMemEntera(opDer)){
                            fValDer = accesoMemoriaEntero(opDer);
                        }
                        else{
                            fValDer = accesoMemoriaFlotante(opDer);
                        }
                        opRes = cuadActual.getiResultado();
                        if(fValIzq != fValDer){
                            actualizarMemoriaEntero(1,opRes);
                        }
                        else{
                            actualizarMemoriaEntero(0,opRes);
                        }
                        System.out.print(cuadActual.getiNumero() + " ");

                        System.out.println("!= " + (fValIzq != fValDer));
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 10:
                        opIzq = cuadActual.getiIzquierda();
                        if(isMemEntera(opIzq)){
                            fValIzq = accesoMemoriaEntero(opIzq);
                        }
                        else{
                            fValIzq = accesoMemoriaFlotante(opIzq);
                        }
                        opDer = cuadActual.getiDerecha();
                        if(isMemEntera(opDer)){
                            fValDer = accesoMemoriaEntero(opDer);
                        }
                        else{
                            fValDer = accesoMemoriaFlotante(opDer);
                        }
                        opRes = cuadActual.getiResultado();
                        if(fValIzq == 1 || fValDer == 1){
                            actualizarMemoriaEntero(1,opRes);
                        }
                        else{
                            actualizarMemoriaEntero(0,opRes);
                        }
                        System.out.print(cuadActual.getiNumero() + " ");

                        System.out.println("|| " + (fValIzq * fValDer));
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 11:
                        opIzq = cuadActual.getiIzquierda();
                        if(isMemEntera(opIzq)){
                            fValIzq = accesoMemoriaEntero(opIzq);
                        }
                        else{
                            fValIzq = accesoMemoriaFlotante(opIzq);
                        }
                        opDer = cuadActual.getiDerecha();
                        if(isMemEntera(opDer)){
                            fValDer = accesoMemoriaEntero(opDer);
                        }
                        else{
                            fValDer = accesoMemoriaFlotante(opDer);
                        }
                        opRes = cuadActual.getiResultado();
                        if(fValIzq == 1 && fValDer == 1){
                            actualizarMemoriaEntero(1,opRes);
                        }
                        else{
                            actualizarMemoriaEntero(0,opRes);
                        }
                        System.out.print(cuadActual.getiNumero() + " ");

                        System.out.println("&& " + (fValIzq * fValDer));
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 12:
                        opIzq = cuadActual.getiIzquierda();
                        opRes = cuadActual.getiResultado();
                        if(isMemEntera(opRes)){
                            fValIzq = accesoMemoriaEntero(opIzq);
                            actualizarMemoriaEntero((int) fValIzq,opRes);
                        }
                        else{
                            fValIzq = accesoMemoriaFlotante(opIzq);
                            actualizarMemoriaFlotante(fValIzq,opRes);
                        }
                        System.out.print(cuadActual.getiNumero() + " ");

                        System.out.println("= " + (fValIzq));
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 13:
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 14:
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 15:
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 16:
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 17:
                        opRes = cuadActual.getiResultado();
                        cuadActual.setiNumero(0);
                        cuadActual = cuadruplosArr.get(opRes);
                        break;
                    case 18:
                        opIzq = cuadActual.getiIzquierda();
                        if(isMemEntera(opIzq)){
                            fValIzq = accesoMemoriaEntero(opIzq);
                        }
                        else{
                            fValIzq = accesoMemoriaFlotante(opIzq);
                        }
                        if(fValIzq == 1){
                            cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                            break;
                        }
                        opRes = cuadActual.getiResultado();
                        cuadActual.setiNumero(0);
                        cuadActual = cuadruplosArr.get(opRes);
                        break;
                    case 19:
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 20:
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 21:
                        cuadActual = cuadruplosArr.get((cuadActual.getiNumero()+1));
                        break;
                    case 22:
                        bEnd = true;
                        break;
                    }
                }
        }

    public static void main( String[] args )throws ParseException, Exception
	{
		try
		{
     		compilador analizador = new compilador( System.in ) ;
			analizador.Programa();
			for(int i = 0; i < listaErrores.size(); i++){
			    System.out.println(listaErrores.get(i));
			}
			if(listaErrores.size()<1){
		        listaContextos.get(0).verTabla();
			    for(int i = 0; i < printConsoleArr.size(); i++){
                    System.out.println(printConsoleArr.get(i));
                }
                maquinaVirtual();
                System.out.println("\n\tBuild Sucessful");
                for(int i = 0; i < cuadruplosArr.size(); i++){
                    System.out.println(i + " " + cuadruplosArr.get(i));
                }
			}else{
			System.out.println("\n"+listaErrores.size()+" errors.");
			}
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("\n\tErrors found.");
		}
	}
}
PARSER_END(compilador)

//palabras reservadas
TOKEN:
{
	<PROGRAM: "Program" >   //1
	| <IF: "if" >           //2
	| <ELSE: "else" >       //3
	| <WHILE: "while" >     //4
	| <PRINT: "print" >     //5
	| <INT: "int" >         //6
	| <FLOAT: "float" >     //7
	| <CHAR: "char" >       //8
	| <VECTOR: "vector" >   //9
	| <RETURN: "return" >   //10
	| <VOID: "void">        //11
	| <LBRACKET: "[">       //12
	| <RBRACKET: "]">       //13
	| <LKEY: "{">           //14
    | <RKEY: "}">           //15
	| <SEMICOLON: ";">      //16
	| <ADDITION: "+">       //17
	| <SUBSTRACTION: "-">   //18
	| <DIVISION: "/">       //19
	| <MULTIPLICATION: "*"> //20
	| <EQ: "==">            //21
	| <LTE: "<=">           //22
	| <LT: "<">             //23
	| <GTE: ">=">           //24
	| <GT: ">">             //21
	| <DFT: "!=">           //26
	| <OR: "||">            //27
	| <AND: "&&">           //28
	| <EQUAL: "=">          //29
	| <LPHARENTESIS: "(">   //30
	| <RPHARENTESIS: ")">   //31
	| <COMA: ",">           //32
	| <QUOTE: "\"">         //33

}

//expresiones regulares para variables
TOKEN:
{
	<cte_i: ( ["0"-"9"] )+ >                                            //34    int
	|<cte_f: ( ["0"-"9"] )+("."(["0"-"9"])+)?  >                        //35    float
	|<cte_s: ("\"")(~["\r","\""])+("\"")>                               //36    string
	|<ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )*>     //37    id

}

SKIP:
{
	" " | "\n" | "\r" | "\r\n" | "\t" | <"//"(~["\n","\r"])*("\n" | "\r" | "\r\n")> //omite los saltos de linea, espacios en blanco, tabulaciones y comentarios
}

void Programa():
{
Cuadruplo cuadActual = new Cuadruplo();
contextoNum++;
cuadActual.CuadruploSetIzqRes(cuadruplosArr.size(),19,-1,contextoNum);
cuadruplosArr.add(cuadActual);
listaContextos.addElement(new TablaVariables());
}
{
	<PROGRAM> <ID> <SEMICOLON> (LOOKAHEAD(3) VARS())*{
	    cuadActual = new Cuadruplo();
	    cuadActual.CuadruploSetIzqRes(cuadruplosArr.size(),17,-1,-1);
        PendingGOTOStack.push(cuadruplosArr.size());
        cuadruplosArr.add(cuadActual);
	} (MODULO())* BLOQUE() <EOF>{
	cuadActual = new Cuadruplo();
	cuadActual.CuadruploSetRes(cuadruplosArr.size(),22,1);
    cuadruplosArr.add(cuadActual);
	}
}

void BLOQUE():
{}
{
	(LOOKAHEAD(2) <LKEY> BLOQUE_AUX() <RKEY>)?
}

void BLOQUE_AUX():
{}
{
	ESTATUTO() (BLOQUE_AUX())?
}

void ESTATUTO():
{}
{
	LOOKAHEAD(3) VARS() | LOOKAHEAD(3) ASIGNACION() | CONDICION() | ESCRITURA() | CICLO() | LLAMADA_FUNC() | RETORNO()

}

void ASIGNACION():
{
Objeto var = new Objeto();
Token identificador;
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
    identificador = <ID>{
        var = search(token.image);
        OperandStack.push(var.getDireccion());
        TypeStack.push(var.getType()+33);
        } <EQUAL>{
          OperatorStack.push(token.kind);
        } MEGAEXPRESION() <SEMICOLON>{
            if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
                if (OperatorStack.peek() == 29)
                {
                    opDer = OperandStack.pop();
                    tyDer = TypeStack.pop();
                    opIzq = OperandStack.pop();
                    tyIzq = TypeStack.pop();
                    opOPerator = OperatorStack.pop();
                    if(tyIzq == tyDer){
                         cuadActual.CuadruploSetIzqRes(cuadruplosArr.size(),opOPerator-17,opDer,opIzq);
                         cuadruplosArr.add(cuadActual);
                    }
                }
            }
       }
}

void MEGAEXPRESION():
{
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	EXPRESION() ((LOOKAHEAD(2)<AND> {
	    OperatorStack.push(token.kind);
	}| <OR>{
	    OperatorStack.push(token.kind);
	    }) EXPRESION(){
       if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
           if (OperatorStack.peek() == 27 || OperatorStack.peek() == 28)
           {
               opDer = OperandStack.pop();
               tyDer = TypeStack.pop();
               opIzq = OperandStack.pop();
               tyIzq = TypeStack.pop();
               opOPerator = OperatorStack.pop();
               tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
               if(tyRes != -1){
                   if(tyRes == 0){
                       opRes = memTemporal.asignacionMemoriaEntera(0);
                       OperandStack.push(opRes);
                    }
                    if(tyRes == 1){
                       opRes = memTemporal.asignacionMemoriaFlotante(0);
                       OperandStack.push(opRes);
                    }
                    cuadActual.CuadruploSetComplete(cuadruplosArr.size(),opOPerator-17,opIzq,opDer,opRes);
                    cuadruplosArr.add(cuadActual);
                    TypeStack.add(tyRes+33);
               }
           }
       }
  })?
}

void EXPRESION():
{
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	EXP() (EXPRESION_AUX() EXP(){
         if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
             if (OperatorStack.peek() >= 21 && OperatorStack.peek() <= 26)
             {
                 opDer = OperandStack.pop();
                 tyDer = TypeStack.pop();
                 opIzq = OperandStack.pop();
                 tyIzq = TypeStack.pop();
                 opOPerator = OperatorStack.pop();
                 tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
                 if(tyRes != -1){
                     if(tyRes == 0){
                         opRes = memTemporal.asignacionMemoriaEntera(0);
                         OperandStack.push(opRes);
                      }
                      if(tyRes == 1){
                         opRes = memTemporal.asignacionMemoriaFlotante(0);
                         OperandStack.push(opRes);
                      }
                      cuadActual.CuadruploSetComplete(cuadruplosArr.size(),opOPerator-17,opIzq,opDer,opRes);
                      cuadruplosArr.add(cuadActual);
                      TypeStack.add(tyRes+33);
                 }
             }
         }
    })?
}

void EXPRESION_AUX():
{}
{
	<LT>{OperatorStack.push(token.kind);}
	| <GT>{OperatorStack.push(token.kind);}
	| <DFT>{OperatorStack.push(token.kind);}
	| <EQ>{OperatorStack.push(token.kind);}
	| <GTE>{OperatorStack.push(token.kind);}
	| <LTE>{OperatorStack.push(token.kind);}
}

void EXP():
{
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	TERMINO()
    (LOOKAHEAD(3)
    (<ADDITION>{
        OperatorStack.push(token.kind);
    } | <SUBSTRACTION>{
        OperatorStack.push(token.kind);
    }) EXP())?
    {
     if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
         if (OperatorStack.peek() == 17 || OperatorStack.peek() == 18)
         {
             opDer = OperandStack.pop();
             tyDer = TypeStack.pop();
             opIzq = OperandStack.pop();
             tyIzq = TypeStack.pop();
             opOPerator = OperatorStack.pop();
             tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
             if(tyRes != -1){
                 if(tyRes == 0){
                     opRes = memTemporal.asignacionMemoriaEntera(0);
                     OperandStack.push(opRes);
                  }
                  if(tyRes == 1){
                     opRes = memTemporal.asignacionMemoriaFlotante(0);
                     OperandStack.push(opRes);
                  }
                  cuadActual.CuadruploSetComplete(cuadruplosArr.size(),opOPerator-17,opIzq,opDer,opRes);
                  cuadruplosArr.add(cuadActual);
                  TypeStack.add(tyRes+33);
             }
         }
     }
    }
}

void TERMINO():
{
//operador DERECHA, operador IZQUIERDA, tipo DERECHA, tipo IZQUIERDA, tipo RESPUESTA, operador RESPUESTA
int opDer, opIzq, opOPerator, tyDer, tyIzq, tyRes = 8,opRes =0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	FACTOR(){
       if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
                    if (OperatorStack.peek() == 19 || OperatorStack.peek() == 20){
                        opDer = OperandStack.pop();
                        tyDer = TypeStack.pop();
                        opIzq = OperandStack.pop();
                        tyIzq = TypeStack.pop();
                        opOPerator = OperatorStack.pop();
                        tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
                        if(tyRes != -1){
                            if(tyRes == 0){
                                opRes = memTemporal.asignacionMemoriaEntera(0);
                                OperandStack.push(opRes);
                             }
                             if(tyRes == 1){
                                opRes = memTemporal.asignacionMemoriaFlotante(0);
                                OperandStack.push(opRes);
                             }
                             cuadActual.CuadruploSetComplete(cuadruplosArr.size(),opOPerator-17,opIzq,opDer,opRes);
                             cuadruplosArr.add(cuadActual);
                             TypeStack.add(tyRes+33);
                        }
                    }
                }
    } (LOOKAHEAD(3)
    (<MULTIPLICATION>{
        OperatorStack.push(token.kind);
    } | <DIVISION>{
        OperatorStack.push(token.kind);
    })
	TERMINO())?
}

void FACTOR():
{}
{
	<LPHARENTESIS>{
	OperatorStack.push(token.kind);
	}
	MEGAEXPRESION()
	<RPHARENTESIS>{
	OperatorStack.pop();
	}
	| (<SUBSTRACTION>)? VARCTE()
}

void VARCTE():
{
Objeto var = new Objeto();
int opIzq,opRes = 0, tyRes = 8;
Cuadruplo cuadVer = new Cuadruplo();
Cuadruplo cuadActual = new Cuadruplo();
}
{
	<ID>{
	    var = search(token.image);
	    OperandStack.push(var.getDireccion());
        TypeStack.push(var.getType()+33);
	}(<LBRACKET>{
    	OperatorStack.push(token.kind);
    	System.out.println(token.image);
    	} EXP() <RBRACKET>{
    	 OperatorStack.pop();
    	 System.out.println(var.getSize());
    	 opIzq = OperandStack.pop();
    	 tyRes = var.getType();
    	 if(tyRes == 0){
             opRes = memTemporal.asignacionMemoriaEntera(0);
          }
          if(tyRes == 1){
             opRes = memTemporal.asignacionMemoriaFlotante(0);
          }
    	 cuadVer.CuadruploSetComplete(cuadruplosArr.size(),20,opIzq,0,var.getSize());
    	 cuadruplosArr.add(cuadVer);
    	 System.out.println(var);
    	 System.out.println(cuadVer);
    	 cuadActual.CuadruploSetComplete(cuadruplosArr.size(),0,opIzq,var.getDireccion(),opRes);
         cuadruplosArr.add(cuadActual);
         System.out.println(cuadActual);
         OperandStack.push(opRes);
         TypeStack.add(tyRes+33);
    	})?  |<cte_i>{
	        //OperandStack.push(Integer.parseInt(token.image));
	        OperandStack.push(memConstante.asignacionMemoriaEntera(Integer.parseInt(token.image)));
            TypeStack.push(token.kind);
            } | <cte_f>{
               //OperandStack.push(token.kind);
                OperandStack.push(memConstante.asignacionMemoriaFlotante(Float.parseFloat(token.image)));
                TypeStack.push(token.kind);
                }
}

void CONDICION():
{
    Cuadruplo cuadActual = new Cuadruplo();
}
{
	<IF> <LPHARENTESIS> MEGAEXPRESION() <RPHARENTESIS>
	{
        cuadActual.CuadruploSetIzqRes(cuadruplosArr.size(),18,OperandStack.pop(),-1);
        JumpStack.push(cuadruplosArr.size());
        cuadruplosArr.add(cuadActual);
	}BLOQUE(){
        cuadruplosArr.get(JumpStack.pop()).setiResultado(cuadruplosArr.size());
    } CONDICION_AUX()
}

void CONDICION_AUX():
{}
{
	({
        Cuadruplo cuadActual = new Cuadruplo();
        cuadActual.CuadruploSetIzqRes(cuadruplosArr.size(),17,-1,-1);
        PendingGOTOStack.push(cuadruplosArr.size());
        cuadruplosArr.add(cuadActual);
	}<ELSE> (CONDICION() | BLOQUE()))? {
	    int pendingPos = PendingGOTOStack.pop();
        Cuadruplo cuadAux = cuadruplosArr.get(pendingPos);
        cuadAux.setiResultado(cuadruplosArr.size());
        cuadruplosArr.set(pendingPos, cuadAux);
	}
}

void CICLO():
{
Cuadruplo cuadGotof = new Cuadruplo();
Cuadruplo cuadGoto = new Cuadruplo();
}
{
    <WHILE>{
	    JumpStack.push(cuadruplosArr.size());
	} <LPHARENTESIS> MEGAEXPRESION() <RPHARENTESIS>{
	    cuadGotof.CuadruploSetIzqRes(cuadruplosArr.size(),18,OperandStack.pop(),-1);
    	JumpStack.push(cuadruplosArr.size());
    	cuadruplosArr.add(cuadGotof);
	} BLOQUE(){
        cuadruplosArr.get(JumpStack.pop()).setiResultado(cuadruplosArr.size()+1);
        cuadGoto.CuadruploSetIzqRes(cuadruplosArr.size(),17,OperandStack.pop(),JumpStack.pop());
        cuadruplosArr.add(cuadGoto);
	}
}

void VARS():
{}
{
	TIPO(){
	    //Indica el tipo del siguiente conjunto de variables
	    tipo = token.kind-6;
	}(VARS_AUX1() | VARS_AUX2()) <SEMICOLON>
}

void VARS_AUX1():
{
//TODO Trabajar en el manejo de vectores
Token identificador;            //El nombre de la variable
Objeto var = new Objeto();   //La variable con tipo y valor
int iCuadAntes;
int iSize;
}
{
	<VECTOR> identificador =  <ID> <LBRACKET>{
	var.setbDim(true);
	iCuadAntes = cuadruplosArr.size();
	} MEGAEXPRESION(){
	if(iCuadAntes != cuadruplosArr.size()){
	    iSize= memConstante.accesoMemoriaEntera((cuadruplosArr.get(cuadruplosArr.size()).getiResultado()));
	}
	else{
	    iSize = memConstante.accesoMemoriaEntera(OperandStack.pop());
	}
	} <RBRACKET> {
        var.setId(identificador.image);
        var.setType(tipo);
        if(tipo == 0){
            var.setDireccion(memGlobal.asignacionMemoriaEnteraDim(0,iSize));
            var.setbDim(true);
            var.setSize(iSize);
            decl(identificador,var);
        }
        if(tipo== 1){
            var.setDireccion(memGlobal.asignacionMemoriaFlotanteDim(0,iSize));
            var.setbDim(true);
            var.setSize(iSize);
            decl(identificador,var);
           }

    } (<EQUAL>{
              	    OperandStack.push(var.getDireccion());
                      TypeStack.push(var.getType()+33);
                      OperatorStack.push(token.kind);
              	} <LKEY> VARS_AUX1_1() <RKEY>)?
}

void VARS_AUX1_1():
{
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	MEGAEXPRESION(){
                               if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
                                   if (OperatorStack.peek() == 29)
                                   {
                                       opDer = OperandStack.pop();
                                       tyDer = TypeStack.pop();
                                       opIzq = OperandStack.pop();
                                       tyIzq = TypeStack.pop();
                                       opOPerator = OperatorStack.pop();
                                       if(tyIzq == tyDer){
                                            cuadActual.CuadruploSetIzqRes(cuadruplosArr.size(),opOPerator-17,opDer,opIzq);
                                            cuadruplosArr.add(cuadActual);
                                       }
                                   }
                               }
                          } (LOOKAHEAD(2) <COMA> VARS_AUX1_1())*
}
void VARS_AUX2():
{
Token identificador;            //El nombre de la variable
Objeto var = new Objeto();   //La variable con tipo y valor
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	identificador = <ID> {
	    var.setId(identificador.image);
	    var.setType(tipo);
	    if(tipo == 0){
	        var.setDireccion(memGlobal.asignacionMemoriaEntera(0));
	        decl(identificador,var);
	    }
	    if(tipo== 1){
        	var.setDireccion(memGlobal.asignacionMemoriaFlotante(0));
        	decl(identificador,var);
        }
	} (<EQUAL>{
	    OperandStack.push(var.getDireccion());
        TypeStack.push(var.getType()+33);
        OperatorStack.push(token.kind);
	} MEGAEXPRESION())? {
                            if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
                                if (OperatorStack.peek() == 29)
                                {
                                    opDer = OperandStack.pop();
                                    tyDer = TypeStack.pop();
                                    opIzq = OperandStack.pop();
                                    tyIzq = TypeStack.pop();
                                    opOPerator = OperatorStack.pop();
                                    if(tyIzq == tyDer){
                                         cuadActual.CuadruploSetIzqRes(cuadruplosArr.size(),opOPerator-17,opDer,opIzq);
                                         cuadruplosArr.add(cuadActual);
                                    }
                                }
                            }
                       }
	(<","> VARS_AUX2())?
}

void MODULO():
{
    Function function = new Function();
    Cuadruplo cuadActual = new Cuadruplo();
    contextoNum++;
    cuadActual.CuadruploSetIzqRes(cuadruplosArr.size(),19,-1,contextoNum);
    cuadruplosArr.add(cuadActual);
    int start = cuadruplosArr.size()-1;
    listaContextos.addElement(new TablaVariables());
    listaFunciones.add(function);
    Token identificador;
}
{
	MODULO_TIPO(){
	    listaFunciones.get(listaFunciones.size()-1).setReturn_type(token.kind-6);
	}
	identificador = <ID> {
	    if(identificador.image.equalsIgnoreCase("main")){
	        int pendingPos = PendingGOTOStack.pop();
	        Cuadruplo cuadAux = cuadruplosArr.get(pendingPos);
	        cuadAux.setiResultado(cuadruplosArr.size()-1);
            cuadruplosArr.set(pendingPos, cuadAux);
	    }

	    listaFunciones.get(listaFunciones.size()-1).setId(identificador.image);
	}<LPHARENTESIS> MODULO_AUX() <RPHARENTESIS>{
	    listaFunciones.get(listaFunciones.size()-1).setFuncStart(start);
	    System.out.println(listaFunciones.get(listaFunciones.size()-1));
	} BLOQUE()
}

void MODULO_TIPO():
{}
{
	<VOID> | <INT> | <FLOAT> | <CHAR> | <VECTOR>
}

void MODULO_AUX():
{}
{
	(TIPO(){
	    listaFunciones.get(listaFunciones.size()-1).addParams_Types(token.kind-6);
	} <ID> {
	    listaFunciones.get(listaFunciones.size()-1).addParams_list(token.image);
	} (<COMA> MODULO_AUX())?)?
}

void RETORNO():
{
    Cuadruplo cuadActual = new Cuadruplo();
}
{
	<RETURN> (LOOKAHEAD(3) VARCTE(){
        cuadActual.CuadruploSetRes(cuadruplosArr.size(),15,token.kind);
        cuadruplosArr.add(cuadActual);
    } | EXP(){
        cuadActual.CuadruploSetRes(cuadruplosArr.size(),15,token.kind);
        cuadruplosArr.add(cuadActual);
    }) <SEMICOLON>
}

void LLAMADA_FUNC():
{
Cuadruplo cuadActual = new Cuadruplo();
Token identificador;
int dir = 0;
}
{
	identificador = <ID>{
	    int i;
	    System.out.println("funciones: "+listaFunciones.size());
	    for(i = 0; i < listaFunciones.size(); i++){
            if(listaFunciones.get(i).getId().equalsIgnoreCase(identificador.image)){
                dir = listaFunciones.get(i).getFuncStart();
            }
        }
        cuadActual.CuadruploSetRes(cuadruplosArr.size(),14,i);
        cuadruplosArr.add(cuadActual);
	} <LPHARENTESIS> LLAMADA_AUX(1) <RPHARENTESIS> <SEMICOLON> {
	    cuadActual = new Cuadruplo();
	    cuadActual.CuadruploSetRes(cuadruplosArr.size(),21,dir);
	    cuadruplosArr.add(cuadActual);
	}
}

void LLAMADA_AUX(int cont):
{}
{
	(LLAMADA_PARAM(cont) (<COMA> LLAMADA_AUX(cont + 1))?)?
}

void LLAMADA_PARAM(int cont):
{
    Cuadruplo cuadActual = new Cuadruplo();
}
{
	LOOKAHEAD(3) <ID>{
        cuadActual.CuadruploSetRes(cuadruplosArr.size(),16,cont);
        cuadruplosArr.add(cuadActual);
    } |  EXP(){
        cuadActual.CuadruploSetRes(cuadruplosArr.size(),16,cont);
        cuadActual.setiIzquierda(OperandStack.pop());
        cuadruplosArr.add(cuadActual);
    }
}

void TIPO():
{}
{
	<INT> | <FLOAT> | <CHAR>
}

void ESCRITURA():
{
printConsole = "";
}
{
	<PRINT> <LPHARENTESIS> (ESCRITURA_AUX() | ESCRITURA_AUX2()) <RPHARENTESIS> <SEMICOLON> {printConsoleArr.add(printConsole);}
}

void ESCRITURA_AUX():
{}
{
	<cte_s>{
	    String aux = token.image;
	    aux = aux.substring(1);
	    aux = aux.substring(0, aux.length()-1);
	    printConsole += aux;
	}
	(<ADDITION> ESCRITURA_AUX2())?
}

void ESCRITURA_AUX2():
{
Objeto var;
}
{
    EXP() {//printConsole += var.getValue().toString();
    } (<ADDITION> ESCRITURA_AUX())?
}
