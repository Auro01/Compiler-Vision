PARSER_BEGIN(compilador)
import java.io.*;
import java.util.*;
class compilador
{
    //Beware those who seek the seecret wich lie within for once you start debugging youl never be the same...
    private static String printConsole;
    private static int tipo = 0;       //La variable indica el tipo de las siguientes variables declaradas en el renglón
    private static Vector<Objeto> varTemporal = new Vector<Objeto>();

    //Todas las funciones se guardán aqui en dferentes espacios (contextos) que contendran los contextos locales
    private static Vector<TablaVariables> listaContextos = new Vector<TablaVariables>();
    private static int contextoNum = -1; //Esta variable apunta a la tabla de contexto actual y se usa para generar el cuadruplo que maneja el apuntador al contexto actual
    private static Vector<Function> listaFunciones = new Vector<Function>();

    private static ArrayList<String> listaErrores = new ArrayList<String>();    //Todos los errores se imprimen después de compilación
    private static ArrayList<String> printConsoleArr = new ArrayList<String>(); //Esta lista se imprime en consola con el comando print al finalizar la compilación

    //En este arreglo se guarda cada cuadruplo a medida que se compila el programa, al final se ejecutaran todos los cuadruplos en orden
    public static ArrayList<Cuadruplo> cuadruplosArr = new ArrayList<Cuadruplo>();
    public static CuboSemantico cuboSemantico = new CuboSemantico();

    public static Stack<Integer> OperandStack = new Stack<Integer>();
    public static Stack<Integer> OperatorStack = new Stack<Integer>();
    public static Stack<Integer> TypeStack = new Stack<Integer>();
    public static Stack<Integer> JumpStack = new Stack<Integer>();
    public static Stack<Integer> ReturnStack = new Stack<Integer>();
    public static Stack<Integer> PendingGOTOStack = new Stack<Integer>();

    private static Memoria memGlobal = new Memoria(10000,40000);
    private static Memoria memLocal = new Memoria(40000,70000);
    private static Memoria memTemporal = new Memoria(70000,100000);
    private static Memoria memConstante = new Memoria(100000,130000);

    public static MaquinaVirtual vm;

    private static void asign(Token identificador, Objeto var){
        boolean error = true;

        int i = 0;
        //Realiza una busqueda del contexto global al local
        for(i = 0; i < listaContextos.size() && error; i++){
            if(listaContextos.get(i).obtenerVar(identificador.image)!=null){
                listaContextos.get(i).actualizarVar(identificador.image, var);
                error = false;
            }
        }

        if(error)listaErrores.add("Error found At line "+identificador.beginLine+", column "+identificador.beginColumn+"\n   variable '"+identificador.image+"' has not been declared.");
    }

    private static Objeto search(String id){
        int i = 0;
        //Realiza una busqueda en el contexto global y local
        if(listaContextos.get(contextoNum).obtenerVar(id)!=null){
            return listaContextos.get(listaContextos.size()-1).obtenerVar(id);
        }else if(listaContextos.get(0).obtenerVar(id)!=null){
            return listaContextos.get(0).obtenerVar(id);
        }

        listaErrores.add("Error found At line "+token.beginLine+", column "+token.beginColumn+"\n   variable '"+id+"' was not found.");
        token.image = "0";

        return new Objeto();
    }

    public static void decl(Token identificador, Objeto var){
        var.setType(tipo);
        boolean noVar = false;

        if(var.getStatus().equals("ok")){
            int i = 0;

            //Busca en el contexto global y local si la variable existe
            if(listaContextos.get(listaContextos.size()-1).obtenerVar(identificador.image)!=null || listaContextos.get(0).obtenerVar(identificador.image)!=null){
                noVar=true;
            }

            if(!noVar){
                listaContextos.lastElement().insertarVar(identificador.image, var);
            }
        }

        if(noVar){
            listaErrores.add("Error found At line "+identificador.beginLine+", column "+identificador.beginColumn+"\n   variable '"+identificador.image+"' was already declared at this scope.");
        }
    }

    public static void main( String[] args )throws ParseException, Exception
	{
		try
		{
     		compilador analizador = new compilador( System.in ) ;
			analizador.Programa();
			for(int i = 0; i < listaErrores.size(); i++){
			    System.out.println(listaErrores.get(i));
			}
			if(listaErrores.size()<1){
		        //listaContextos.get(0).verTabla();
                vm = new MaquinaVirtual(cuadruplosArr, memGlobal, memLocal,memTemporal,memConstante, listaFunciones);
                vm.run();
                System.out.println("\n\tBuild Sucessful");
                for(int i = 0; i < cuadruplosArr.size(); i++){
                    System.out.println(i + " " + cuadruplosArr.get(i));
                }
			}else{
			System.out.println("\n"+listaErrores.size()+" errors.");
			}
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("\n\tErrors found.");
		}
	}
}
PARSER_END(compilador)

//palabras reservadas
TOKEN:
{
	<PROGRAM: "Program" >   //1
	| <IF: "if" >           //2
	| <ELSE: "else" >       //3
	| <WHILE: "while" >     //4
	| <PRINT: "print" >     //5
	| <INT: "int" >         //6
	| <FLOAT: "float" >     //7
	| <CHAR: "char" >       //8
	| <VECTOR: "vector" >   //9
	| <RETURN: "return" >   //10
	| <VOID: "void">        //11
	| <LBRACKET: "[">       //12
	| <RBRACKET: "]">       //13
	| <LKEY: "{">           //14
    | <RKEY: "}">           //15
	| <SEMICOLON: ";">      //16
	| <ADDITION: "+">       //17
	| <SUBSTRACTION: "-">   //18
	| <DIVISION: "/">       //19
	| <MULTIPLICATION: "*"> //20
	| <EQ: "==">            //21
	| <LTE: "<=">           //22
	| <LT: "<">             //23
	| <GTE: ">=">           //24
	| <GT: ">">             //21
	| <DFT: "!=">           //26
	| <OR: "||">            //27
	| <AND: "&&">           //28
	| <EQUAL: "=">          //29
	| <LPHARENTESIS: "(">   //30
	| <RPHARENTESIS: ")">   //31
	| <COMA: ",">           //32
	| <QUOTE: "\"">         //33

}

//expresiones regulares para variables
TOKEN:
{
	<cte_i: ( ["0"-"9"] )+ >                                            //34    int
	|<cte_f: ( ["0"-"9"] )+("."(["0"-"9"])+)?  >                        //35    float
	|<cte_s: ("\"")(~["\r","\""])+("\"")>                               //36    string
	|<ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )*>     //37    id

}

SKIP:
{
	" " | "\n" | "\r" | "\r\n" | "\t" | <"//"(~["\n","\r"])*("\n" | "\r" | "\r\n")> //omite los saltos de linea, espacios en blanco, tabulaciones y comentarios
}

void Programa():
{
Cuadruplo cuadActual = new Cuadruplo();
contextoNum++;
cuadActual.CuadruploSetIzqRes(cuadruplosArr.size(),19,-1,contextoNum);
cuadruplosArr.add(cuadActual);
listaContextos.addElement(new TablaVariables());
}
{
	<PROGRAM> <ID> <SEMICOLON> (LOOKAHEAD(3) VARS())*{
	    cuadActual = new Cuadruplo();
	    cuadActual.CuadruploSetIzqRes(token.beginLine,17,-1,-1);
        PendingGOTOStack.push(cuadruplosArr.size());
        cuadruplosArr.add(cuadActual);
	} (MODULO())* BLOQUE() <EOF>{
	cuadActual = new Cuadruplo();
	cuadActual.CuadruploSetRes(token.beginLine,22,1);
    cuadruplosArr.add(cuadActual);
	}
}

void BLOQUE():
{}
{
	(LOOKAHEAD(2) <LKEY> BLOQUE_AUX() <RKEY>)?
}

void BLOQUE_AUX():
{}
{
	ESTATUTO() (BLOQUE_AUX())?
}

void ESTATUTO():
{}
{
	LOOKAHEAD(3) VARS() | LOOKAHEAD(3) ASIGNACION() | CONDICION() | ESCRITURA() | CICLO() | LLAMADA_FUNC() <SEMICOLON> | RETORNO()

}

void ASIGNACION():
{
Objeto var = new Objeto();
Token identificador;
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
    identificador = <ID>{
        var = search(token.image);
        OperandStack.push(var.getDireccion());
        TypeStack.push(var.getType()+34);
    }(<LBRACKET>{
        OperatorStack.push(token.kind);
        } EXP() <RBRACKET>{
        OperatorStack.pop();
        opIzq = OperandStack.pop();
        tyRes = var.getType();
        if(tyRes == 0){
          opRes = memTemporal.asignacionMemoriaEntera(0);
        }
        if(tyRes == 1){
          opRes = memTemporal.asignacionMemoriaFlotante(0);
        }
        cuadActual = new Cuadruplo();
        cuadActual.CuadruploSetComplete(token.beginLine,20,opIzq,0,var.getSize());
        cuadruplosArr.add(cuadActual);
        cuadActual = new Cuadruplo();
        opRes = opRes*-1;
        cuadActual.CuadruploSetComplete(token.beginLine,0,opIzq,var.getDireccion(),opRes);
        cuadruplosArr.add(cuadActual);
        OperandStack.push(opRes);
        TypeStack.add(tyRes+34);
        })? <EQUAL>{
        OperatorStack.push(token.kind);
    } MEGAEXPRESION(){
         if(!OperatorStack.isEmpty()){
             if (OperatorStack.peek() == 29){
                 opDer = OperandStack.pop();
                 tyDer = TypeStack.pop();
                 opIzq = OperandStack.pop();
                 tyIzq = TypeStack.pop();
                 opOPerator = OperatorStack.pop();
                 if(tyIzq == tyDer){
                      cuadActual = new Cuadruplo();
                      cuadActual.CuadruploSetIzqRes(token.beginLine,opOPerator-17,opDer,opIzq);
                      cuadruplosArr.add(cuadActual);
                 }
             }
         }
    }
    <SEMICOLON>
}

void MEGAEXPRESION():
{
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	EXPRESION() ((LOOKAHEAD(2)<AND> {
	    OperatorStack.push(token.kind);
	}| <OR>{
	    OperatorStack.push(token.kind);
	    }) EXPRESION(){
       if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
           if (OperatorStack.peek() == 27 || OperatorStack.peek() == 28)
           {
               opDer = OperandStack.pop();
               tyDer = TypeStack.pop();
               opIzq = OperandStack.pop();
               tyIzq = TypeStack.pop();
               opOPerator = OperatorStack.pop();
               tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
               if(tyRes != -1){
                   if(tyRes == 0){
                       opRes = memTemporal.asignacionMemoriaEntera(0);
                       OperandStack.push(opRes);
                    }
                    if(tyRes == 1){
                       opRes = memTemporal.asignacionMemoriaFlotante(0);
                       OperandStack.push(opRes);
                    }
                    cuadActual.CuadruploSetComplete(token.beginLine,opOPerator-17,opIzq,opDer,opRes);
                    cuadruplosArr.add(cuadActual);
                    TypeStack.add(tyRes+34);
               }
           }
       }
  })?
}

void EXPRESION():
{
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	EXP() (EXPRESION_AUX() EXP(){
         if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
             if (OperatorStack.peek() >= 21 && OperatorStack.peek() <= 26)
             {
                 opDer = OperandStack.pop();
                 tyDer = TypeStack.pop();
                 opIzq = OperandStack.pop();
                 tyIzq = TypeStack.pop();
                 opOPerator = OperatorStack.pop();
                 tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
                 if(tyRes != -1){
                     if(tyRes == 0){
                         opRes = memTemporal.asignacionMemoriaEntera(0);
                         OperandStack.push(opRes);
                      }
                      if(tyRes == 1){
                         opRes = memTemporal.asignacionMemoriaFlotante(0);
                         OperandStack.push(opRes);
                      }
                      cuadActual.CuadruploSetComplete(token.beginLine,opOPerator-17,opIzq,opDer,opRes);
                      cuadruplosArr.add(cuadActual);
                      TypeStack.add(tyRes+34);
                 }
             }
         }
    })?
}

void EXPRESION_AUX():
{}
{
	<LT>{OperatorStack.push(token.kind);}
	| <GT>{OperatorStack.push(token.kind);}
	| <DFT>{OperatorStack.push(token.kind);}
	| <EQ>{OperatorStack.push(token.kind);}
	| <GTE>{OperatorStack.push(token.kind);}
	| <LTE>{OperatorStack.push(token.kind);}
}

void EXP():
{
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	TERMINO()
    (LOOKAHEAD(3)
    (<ADDITION>{
        OperatorStack.push(token.kind);
    } | <SUBSTRACTION>{
        OperatorStack.push(token.kind);
    }) EXP())?
    {
     if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
         if (OperatorStack.peek() == 17 || OperatorStack.peek() == 18)
         {
             opDer = OperandStack.pop();
             tyDer = TypeStack.pop();
             opIzq = OperandStack.pop();
             tyIzq = TypeStack.pop();
             opOPerator = OperatorStack.pop();
             tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
             if(tyRes != -1){
                 if(tyRes == 0){
                     opRes = memTemporal.asignacionMemoriaEntera(0);
                     OperandStack.push(opRes);
                  }
                  if(tyRes == 1){
                     opRes = memTemporal.asignacionMemoriaFlotante(0);
                     OperandStack.push(opRes);
                  }
                  cuadActual.CuadruploSetComplete(token.beginLine,opOPerator-17,opIzq,opDer,opRes);
                  cuadruplosArr.add(cuadActual);
                  TypeStack.add(tyRes+34);
             }
         }
     }
    }
}

void TERMINO():
{
//operador DERECHA, operador IZQUIERDA, tipo DERECHA, tipo IZQUIERDA, tipo RESPUESTA, operador RESPUESTA
int opDer, opIzq, opOPerator, tyDer, tyIzq, tyRes = 8,opRes =0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	FACTOR(){
        if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
            if (OperatorStack.peek() == 19 || OperatorStack.peek() == 20){
                opDer = OperandStack.pop();
                tyDer = TypeStack.pop();
                opIzq = OperandStack.pop();
                tyIzq = TypeStack.pop();
                opOPerator = OperatorStack.pop();
                tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
                if(tyRes != -1){
                    if(tyRes == 0){
                        opRes = memTemporal.asignacionMemoriaEntera(0);
                        OperandStack.push(opRes);
                     }
                     if(tyRes == 1){
                        opRes = memTemporal.asignacionMemoriaFlotante(0);
                        OperandStack.push(opRes);
                     }
                     cuadActual.CuadruploSetComplete(token.beginLine,opOPerator-17,opIzq,opDer,opRes);
                     cuadruplosArr.add(cuadActual);
                     TypeStack.add(tyRes+34);
                }
            }
        }
    } (LOOKAHEAD(3)
    (<MULTIPLICATION>{
        OperatorStack.push(token.kind);
    } | <DIVISION>{
        OperatorStack.push(token.kind);
    })
	TERMINO())?
}

void FACTOR():
{}
{
	<LPHARENTESIS>{
	OperatorStack.push(token.kind);
	}
	MEGAEXPRESION()
	<RPHARENTESIS>{
	OperatorStack.pop();
	}
	| (<SUBSTRACTION>)? VARCTE()
}

void VARCTE():
{
Objeto var = new Objeto();
int opIzq,opRes = 0, tyRes = 8;
Cuadruplo cuadVer = new Cuadruplo();
Cuadruplo cuadActual = new Cuadruplo();
String id;
boolean end = false;
}
{
	LOOKAHEAD(3) id = LLAMADA_FUNC(){
	    int type = 0, dir = 0;
	    for(int i = 0; i < listaFunciones.size() && !end; i++){
            if(listaFunciones.get(i).getId().equalsIgnoreCase(id)){
                dir = 23;
                type = listaFunciones.get(i).getReturn_type();
                end = true;
            }
        }
        OperandStack.push(dir);
        TypeStack.push(type+34);
	}
	| <ID>{
	    var = search(token.image);
	    OperandStack.push(var.getDireccion());
        TypeStack.push(var.getType()+34);
	}(<LBRACKET>{
	    OperandStack.pop();
    	OperatorStack.push(token.kind);
    	} EXP() <RBRACKET>{
    	 OperatorStack.pop();
    	 opIzq = OperandStack.pop();
    	 tyRes = var.getType();
    	 if(tyRes == 0){
             opRes = memTemporal.asignacionMemoriaEntera(0);
          }
          if(tyRes == 1){
             opRes = memTemporal.asignacionMemoriaFlotante(0);
          }
    	 cuadVer.CuadruploSetComplete(token.beginLine,20,opIzq,0,var.getSize());
    	 cuadruplosArr.add(cuadVer);
    	 opRes = opRes*-1;
    	 cuadActual.CuadruploSetComplete(token.beginLine,0,opIzq,var.getDireccion(),opRes);
         cuadruplosArr.add(cuadActual);
         OperandStack.push(opRes);
         TypeStack.add(tyRes+34);
    	})?
   |<cte_i>{
        OperandStack.push(memConstante.asignacionMemoriaEntera(Integer.parseInt(token.image)));
        TypeStack.push(token.kind);
        }
   | <cte_f>{
        OperandStack.push(memConstante.asignacionMemoriaFlotante(Float.parseFloat(token.image)));
        TypeStack.push(token.kind);
   }
}

void CONDICION():
{
    Cuadruplo cuadActual = new Cuadruplo();
}
{
	<IF> <LPHARENTESIS> MEGAEXPRESION() <RPHARENTESIS>
	{
        cuadActual.CuadruploSetIzqRes(token.beginLine,18,OperandStack.pop(),-1);
        JumpStack.push(cuadruplosArr.size());
        cuadruplosArr.add(cuadActual);
	}BLOQUE() CONDICION_AUX()
}

void CONDICION_AUX():
{}
{
	({
	    cuadruplosArr.get(JumpStack.pop()).setiResultado(cuadruplosArr.size()+1);
        Cuadruplo cuadActual = new Cuadruplo();
        cuadActual.CuadruploSetIzqRes(token.beginLine,17,-1,-1);
        PendingGOTOStack.push(cuadruplosArr.size());
        cuadruplosArr.add(cuadActual);
	}<ELSE> (CONDICION() | BLOQUE()){
        int pendingPos = PendingGOTOStack.pop();
        Cuadruplo cuadAux = cuadruplosArr.get(pendingPos);
        cuadAux.setiResultado(cuadruplosArr.size());
        cuadruplosArr.set(pendingPos, cuadAux);
    })?{
        if(!JumpStack.empty()){
           cuadruplosArr.get(JumpStack.pop()).setiResultado(cuadruplosArr.size());
    }}
}

void CICLO():
{
Cuadruplo cuadGotof = new Cuadruplo();
Cuadruplo cuadGoto = new Cuadruplo();
}
{
    <WHILE>{
	    JumpStack.push(cuadruplosArr.size());
	} <LPHARENTESIS> MEGAEXPRESION() <RPHARENTESIS>{
	    cuadGotof.CuadruploSetIzqRes(token.beginLine,18,OperandStack.pop(),-1);
    	JumpStack.push(cuadruplosArr.size());
    	cuadruplosArr.add(cuadGotof);
	} BLOQUE(){
        cuadruplosArr.get(JumpStack.pop()).setiResultado(cuadruplosArr.size()+1);
        cuadGoto.CuadruploSetRes(token.beginLine,17,JumpStack.pop());
        cuadruplosArr.add(cuadGoto);
	}
}

void VARS():
{}
{
	TIPO(){
	    //Indica el tipo del siguiente conjunto de variables
	    tipo = token.kind-6;
	}(VARS_AUX1() | VARS_AUX2()) <SEMICOLON>
}

void VARS_AUX1():
{
Token identificador;            //El nombre de la variable
Objeto var = new Objeto();   //La variable con tipo y valor
int iCuadAntes;
int iSize;
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	<VECTOR> identificador =  <ID> <LBRACKET>{
	var.setbDim(true);
	iCuadAntes = cuadruplosArr.size();
	} EXP(){
	if(iCuadAntes != cuadruplosArr.size()){
	    iSize= memConstante.accesoMemoriaEntera((cuadruplosArr.get(cuadruplosArr.size()).getiResultado()));
	}
	else{
	    iSize = memConstante.accesoMemoriaEntera(OperandStack.pop());
	}
	} <RBRACKET> {
        var.setId(identificador.image);
        var.setType(tipo);
        if(tipo == 0){
            var.setDireccion(memGlobal.asignacionMemoriaEnteraDim(0,iSize));
            var.setbDim(true);
            var.setSize(iSize);
            decl(identificador,var);
        }
        if(tipo== 1){
            var.setDireccion(memGlobal.asignacionMemoriaFlotanteDim(0,iSize));
            var.setbDim(true);
            var.setSize(iSize);
            decl(identificador,var);
           }

    } (<EQUAL>{
        OperandStack.push(var.getDireccion());
        TypeStack.push(var.getType()+34);
        OperatorStack.push(token.kind);
    } <LKEY>VARS_AUX1_1()<RKEY>)?
}

void VARS_AUX1_1():
{
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	EXP(){
       if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
           if (OperatorStack.peek() == 29)
           {
               opDer = OperandStack.pop();
               tyDer = TypeStack.pop();
               opIzq = OperandStack.pop();
               tyIzq = TypeStack.pop();
               opOPerator = OperatorStack.pop();
               if(tyIzq == tyDer){
                    cuadActual.CuadruploSetIzqRes(token.beginLine,opOPerator-17,opDer,opIzq);
                    cuadruplosArr.add(cuadActual);
               }
           }
       }
    } (LOOKAHEAD(2) <COMA> VARS_AUX1_1())*
}
void VARS_AUX2():
{
Token identificador;            //El nombre de la variable
Objeto var = new Objeto();   //La variable con tipo y valor
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	identificador = <ID> {
	    var.setId(identificador.image);
	    var.setType(tipo);
	    if(tipo == 0){
	        var.setDireccion(memGlobal.asignacionMemoriaEntera(0));
	        decl(identificador,var);
	    }
	    if(tipo== 1){
        	var.setDireccion(memGlobal.asignacionMemoriaFlotante(0));
        	decl(identificador,var);
        }
	} (<EQUAL>{
	    OperandStack.push(var.getDireccion());
        TypeStack.push(var.getType()+34);
        OperatorStack.push(token.kind);
	} MEGAEXPRESION())? {
        if(!OperatorStack.isEmpty()){
            if (OperatorStack.peek() == 29)
            {
                opDer = OperandStack.pop();
                tyDer = TypeStack.pop();
                opIzq = OperandStack.pop();
                tyIzq = TypeStack.pop();
                opOPerator = OperatorStack.pop();
                if(tyIzq == tyDer){
                     cuadActual.CuadruploSetIzqRes(token.beginLine,opOPerator-17,opDer,opIzq);
                     cuadruplosArr.add(cuadActual);
                }
            }
        }
   }
	(<","> VARS_AUX2())?
}

void MODULO():
{
    Function function = new Function();
    Cuadruplo cuadActual = new Cuadruplo();
    contextoNum++;
    cuadActual.CuadruploSetIzqRes(cuadruplosArr.size(),19,-1,contextoNum);
    cuadruplosArr.add(cuadActual);
    int start = cuadruplosArr.size()-1;
    listaContextos.add(new TablaVariables());
    listaFunciones.add(function);
    Token identificador;
}
{
	MODULO_TIPO(){
	    listaFunciones.get(listaFunciones.size()-1).setReturn_type(token.kind-6);
	}
	identificador = <ID> {
	    if(identificador.image.equalsIgnoreCase("main")){
	        int pendingPos = PendingGOTOStack.pop();
	        Cuadruplo cuadAux = cuadruplosArr.get(pendingPos);
	        cuadAux.setiResultado(cuadruplosArr.size()-1);
            cuadruplosArr.set(pendingPos, cuadAux);
	    }

	    listaFunciones.get(listaFunciones.size()-1).setId(identificador.image);
	}<LPHARENTESIS> MODULO_AUX() <RPHARENTESIS>{
	    listaFunciones.get(listaFunciones.size()-1).setFuncStart(start);
	} BLOQUE() {
	    cuadActual = new Cuadruplo();
	    cuadActual.CuadruploSetRes(token.beginLine,23,-1);
	    cuadruplosArr.add(cuadActual);
	}
}

void MODULO_TIPO():
{}
{
	<VOID> | <INT> | <FLOAT> | <CHAR> | <VECTOR>
}

void MODULO_AUX():
{
Objeto var = new Objeto();
}
{
	(TIPO(){
	    var.setType(token.kind-6);
	    listaFunciones.get(listaFunciones.size()-1).addParams_Types(token.kind-6);
	} <ID> {
	    if(var.getType() == 0){
	        var.setDireccion(memLocal.asignacionMemoriaEntera(0));
	    }else if (var.getType() == 1){
	        var.setDireccion(memLocal.asignacionMemoriaFlotante(0));
	    }else{
	        var.setDireccion(memLocal.asignacionMemoriaChar(new char[]{'0'}));
	    }

	    var.setId(token.image);
	    decl(token, var);
	    listaFunciones.get(listaFunciones.size()-1).addParams_list(var.getDireccion());
	} (<COMA> MODULO_AUX())?)?
}

void RETORNO():
{
    Cuadruplo cuadActual = new Cuadruplo();
    int dir = 0;
}
{
	<RETURN> (LOOKAHEAD(3) VARCTE(){
	    if(token.kind-34 == 0){
	        if(listaFunciones.get(listaFunciones.size()-1).getReturn_type() == 0){
                dir = memLocal.asignacionMemoriaEntera(Integer.parseInt(token.image));
	        }else{
                listaErrores.add("Error found At line "+token.beginLine+", column "+token.beginColumn+"\n unexpected return type.");
	        }
	    }else{
	        if(listaFunciones.get(listaFunciones.size()-1).getReturn_type() == 1){
                dir = memLocal.asignacionMemoriaFlotante(Float.parseFloat(token.image));
            }else{
                listaErrores.add("Error found At line "+token.beginLine+", column "+token.beginColumn+"\n unexpected return type.");
            }
	    }
        cuadActual.CuadruploSetRes(token.beginLine,15,dir);
        cuadruplosArr.add(cuadActual);
    } | EXP(){
        dir = OperandStack.pop();
        cuadActual.CuadruploSetRes(token.beginLine,15,dir);
        cuadruplosArr.add(cuadActual);
    }) <SEMICOLON>
}

String LLAMADA_FUNC():
{
Cuadruplo cuadActual = new Cuadruplo();
Token identificador;
int dir = 0;
}
{
	identificador = <ID>{
	    int i;
	    boolean end = false;
	    for(i = 0; i < listaFunciones.size() && !end; i++){
            if(listaFunciones.get(i).getId().equalsIgnoreCase(identificador.image)){
                dir = listaFunciones.get(i).getFuncStart();
                end = true;
            }
        }
        cuadActual.CuadruploSetRes(token.beginLine,14,i-1);
        cuadruplosArr.add(cuadActual);
	} <LPHARENTESIS> LLAMADA_AUX() <RPHARENTESIS> {
	    cuadActual = new Cuadruplo();
	    cuadActual.CuadruploSetRes(token.beginLine,21,dir);
	    cuadruplosArr.add(cuadActual);

	    return identificador.image;
	}
}

void LLAMADA_AUX():
{}
{
	(LLAMADA_PARAM() (<COMA> LLAMADA_AUX())?)?
}

void LLAMADA_PARAM():
{
    Cuadruplo cuadActual = new Cuadruplo();
}
{
	EXP(){
        int opRes = OperandStack.pop();
        cuadActual.CuadruploSetRes(token.beginLine,16,opRes);
        cuadruplosArr.add(cuadActual);
    }
}

void TIPO():
{}
{
	<INT> | <FLOAT> | <CHAR>
}

void ESCRITURA():
{
printConsole = "";
}
{
	<PRINT> <LPHARENTESIS> (ESCRITURA_AUX() | ESCRITURA_AUX2()) <RPHARENTESIS> <SEMICOLON> {printConsoleArr.add(printConsole);}
}

void ESCRITURA_AUX():
{
Cuadruplo cuadActual = new Cuadruplo();
int opRes;
}
{
	<cte_s>{
	    String aux = token.image;
	    aux = aux.substring(1);
	    aux = aux.substring(0, aux.length()-1);
	    //printConsole += aux;

	    opRes = memTemporal.asignacionMemoriaChar(aux.toCharArray());
	    cuadActual.CuadruploSetRes(token.beginLine, 13, opRes);
	    cuadruplosArr.add(cuadActual);
	}
	(<ADDITION> ESCRITURA_AUX2())?
}

void ESCRITURA_AUX2():
{
Cuadruplo cuadActual = new Cuadruplo();
int cuadSize = cuadruplosArr.size(), opRes;
}
{
    EXP() {
        if(cuadSize == cuadruplosArr.size()){
            Objeto var = search(token.image);
            cuadActual.CuadruploSetRes(token.beginLine, 13, var.getDireccion());
        }else{
            opRes = cuadruplosArr.get(cuadruplosArr.size()-1).getiResultado();
            cuadActual.CuadruploSetRes(token.beginLine, 13, opRes);
        }
        cuadruplosArr.add(cuadActual);
    } (<ADDITION> ESCRITURA_AUX())?
}
