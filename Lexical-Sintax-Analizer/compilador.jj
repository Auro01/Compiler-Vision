PARSER_BEGIN(compilador)
import java.io.*;
import java.util.*;
class compilador
{
    //Beware those who seek the seecret wich lie within for once you start debugging youl never be the same...



    int GlobalM = 10000;
    int LocalM = 20000;


    private static String printConsole;
    private static int tipo = 0;       //La variable indica el tipo de las siguientes variables declaradas en el renglón
    private static Vector<Objeto> varTemporal = new Vector<Objeto>();


    //Todas las funciones se guardán aqui en dferentes espacios (contextos) que contendras los contextos locales
    private static Vector<TablaVariables> listaContextos = new Vector<TablaVariables>();
    private static ArrayList<String> listaErrores = new ArrayList<String>();    //Todos los errores se imprimen después de compilación
    private static ArrayList<String> printConsoleArr = new ArrayList<String>(); //Esta lista se imprime en consola con el comando print al finalizar la compilación
    //En este arreglo se guarda cada cuadrupplo a medida que se compila el programa, al final se ejecutaran todos los cuadruplos en orden
    private static ArrayList<Cuadruplo> cuadruplo = new ArrayList<Cuadruplo>();
    public static CuboSemantico cuboSemantico = new CuboSemantico();
    public static Objeto[] cuadruplos = new Objeto[4];


    public static ArrayList<Cuadruplo> cudruplosArr = new ArrayList<Cuadruplo>();

    public static Stack<Integer> OperandStack = new Stack<Integer>();
    public static Stack<Integer> OperatorStack = new Stack<Integer>();
    public static Stack<Integer> TypeStack = new Stack<Integer>();
    public static Stack<Integer> JumpStack = new Stack<Integer>();
    public static Stack<Integer> ReturnStack = new Stack<Integer>();

    private static Memoria memGlobal = new Memoria(10000,20000);
    private static Memoria memLocal = new Memoria(20000,30000);
    private static Memoria memTemporal = new Memoria(30000,40000);
    private static Memoria memConstante = new Memoria(40000,50000);




    private static void asign(Token identificador, Objeto var){
        boolean error = true;

        int i = 0;
        //Realiza una busqueda del contexto global al local
        for(i = 0; i < listaContextos.size() && error; i++){
            if(listaContextos.get(i).obtenerVar(identificador.image)!=null){
                listaContextos.get(i).actualizarVar(identificador.image, var);
                error = false;
            }
        }

        if(error)listaErrores.add("Error found At line "+identificador.beginLine+", column "+identificador.beginColumn+"\n   variable '"+identificador.image+"' has not been declared.");
    }

    private static Objeto search(){
        int i = 0;
        //Realiza una busqueda del contexto global al local
        for(i = 0; i < listaContextos.size(); i++){
            if(listaContextos.get(i).obtenerVar(token.image)!=null){
                return listaContextos.get(i).obtenerVar(token.image);
            }
        }
        listaErrores.add("Error found At line "+token.beginLine+", column "+token.beginColumn+"\n   variable '"+token.image+"' was not found.");
        token.image = "0";

        return new Objeto();
    }

    public static void decl(Token identificador, Objeto var){
        var.setType(tipo);
        boolean noVar = false;

        if(var.getStatus().equals("ok")){
            int i = 0;

            //Busca de contexto global a local si la variable existe
            for(i = 0; i < listaContextos.size(); i++){
                if(listaContextos.get(i).obtenerVar(identificador.image)!=null){
                    noVar=true;
                }
            }

            if(!noVar){
                listaContextos.lastElement().insertarVar(identificador.image, var);
            }
        }

        if(noVar){
            listaErrores.add("Error found At line "+identificador.beginLine+", column "+identificador.beginColumn+"\n   variable '"+identificador.image+"' was already declared at this scope.");
        }
    }

    public static void main( String[] args )throws ParseException, Exception
	{
		try
		{
     		compilador analizador = new compilador( System.in ) ;
			analizador.Programa();
			for(int i = 0; i < listaErrores.size(); i++){
			    System.out.println(listaErrores.get(i));
			}
			if(listaErrores.size()<1){
			    for(int i = 0; i < printConsoleArr.size(); i++){
                    System.out.println(printConsoleArr.get(i));
                }
                System.out.println("\n\tBuild Sucessful");
                for(int i = 0; i < cudruplosArr.size(); i++){
                    System.out.println(i + " " + cudruplosArr.get(i));
                }
			}else{
			System.out.println("\n"+listaErrores.size()+" errors.");
			}
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("\n\tErrors found.");
		}
	}
}
PARSER_END(compilador)

//palabras reservadas
TOKEN:
{
	<PROGRAM: "Program" >   //1
	| <IF: "if" >           //2
	| <ELSE: "else" >       //3
	| <WHILE: "while" >     //4
	| <PRINT: "print" >     //5
	| <INT: "int" >         //6
	| <FLOAT: "float" >     //7
	| <CHAR: "char" >       //8
	| <VECTOR: "vector" >   //9
	| <RETURN: "return" >   //10
	| <VOID: "void">        //11
	| <LBRACKET: "[">       //12
	| <RBRACKET: "]">       //13
	| <LKEY: "{">           //14
    | <RKEY: "}">           //15
	| <SEMICOLON: ";">      //16
	| <ADDITION: "+">       //17
	| <SUBSTRACTION: "-">   //18
	| <DIVISION: "/">       //19
	| <MULTIPLICATION: "*"> //20
	| <EQ: "==">            //21
	| <LTE: "<=">           //22
	| <LT: "<">             //23
	| <GTE: ">=">           //24
	| <GT: ">">             //21
	| <DFT: "!=">           //26
	| <OR: "||">            //27
	| <AND: "&&">           //28
	| <EQUAL: "=">          //29
	| <LPHARENTESIS: "(">   //30
	| <RPHARENTESIS: ")">   //31
	| <COMA: ",">           //32
	| <QUOTE: "\"">         //33

}

//expresiones regulares para variables
TOKEN:
{
	<cte_i: ( ["0"-"9"] )+ >                                            //34    int
	|<cte_f: ( ["0"-"9"] )+("."(["0"-"9"])+)?  >                        //35    float
	|<cte_s: ("\"")(~["\r","\""])+("\"")>                               //36    string
	|<ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )*>     //37    id

}

SKIP:
{
	" " | "\n" | "\r" | "\r\n" | "\t" | <"//"(~["\n","\r"])*("\n" | "\r" | "\r\n")> //omite los saltos de linea, espacios en blanco, tabulaciones y comentarios
}

void Programa():
{
listaContextos.addElement(new TablaVariables());
}
{
	<PROGRAM> <ID> <SEMICOLON> (LOOKAHEAD(3) VARS())* (MODULO())* BLOQUE() <EOF>
}

void BLOQUE():
{}
{
	(LOOKAHEAD(2) <LKEY> BLOQUE_AUX() <RKEY>)?
}

void BLOQUE_AUX():
{}
{
	ESTATUTO() (BLOQUE_AUX())?
}

void ESTATUTO():
{}
{
	LOOKAHEAD(3) VARS() | LOOKAHEAD(3) ASIGNACION() | CONDICION() | ESCRITURA() | CICLO() | LLAMADA_FUNC() | RETORNO()

}

void ASIGNACION():
{
Objeto var;
Token identificador;
}
{
    identificador = <ID> <EQUAL> MEGAEXPRESION() <SEMICOLON>{}
}

void MEGAEXPRESION():
{
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	EXPRESION() ((LOOKAHEAD(2)<AND> {
	    OperatorStack.push(token.kind);
	}| <OR>{
	    OperatorStack.push(token.kind);
	    }) EXPRESION(){
       if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
           if (OperatorStack.peek() == 27 || OperatorStack.peek() == 28)
           {
               opDer = OperandStack.pop();
               tyDer = TypeStack.pop();
               opIzq = OperandStack.pop();
               tyIzq = TypeStack.pop();
               opOPerator = OperatorStack.pop();
               tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
               if(tyRes != -1){
                   if(tyRes == 0){
                       opRes = memTemporal.asignacionMemoriaEntera(0);
                       OperandStack.push(opRes);
                    }
                    if(tyRes == 1){
                       opRes = memTemporal.asignacionMemoriaFlotante(0);
                       OperandStack.push(opRes);
                    }
                    cuadActual.CuadruploSetComplete(cudruplosArr.size(),opOPerator-17,opIzq,opDer,opRes);
                    cudruplosArr.add(cuadActual);
                    TypeStack.add(tyRes+33);
               }
           }
       }
  })?
}

void EXPRESION():
{
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	EXP() (EXPRESION_AUX() EXP(){
         if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
             if (OperatorStack.peek() >= 21 && OperatorStack.peek() <= 26)
             {
                 opDer = OperandStack.pop();
                 tyDer = TypeStack.pop();
                 opIzq = OperandStack.pop();
                 tyIzq = TypeStack.pop();
                 opOPerator = OperatorStack.pop();
                 tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
                 if(tyRes != -1){
                     if(tyRes == 0){
                         opRes = memTemporal.asignacionMemoriaEntera(0);
                         OperandStack.push(opRes);
                      }
                      if(tyRes == 1){
                         opRes = memTemporal.asignacionMemoriaFlotante(0);
                         OperandStack.push(opRes);
                      }
                      cuadActual.CuadruploSetComplete(cudruplosArr.size(),opOPerator-17,opIzq,opDer,opRes);
                      cudruplosArr.add(cuadActual);
                      TypeStack.add(tyRes+33);
                 }
             }
         }
    })?
}

void EXPRESION_AUX():
{}
{
	<LT>{OperatorStack.push(token.kind);}
	| <GT>{OperatorStack.push(token.kind);}
	| <DFT>{OperatorStack.push(token.kind);}
	| <EQ>{OperatorStack.push(token.kind);}
	| <GTE>{OperatorStack.push(token.kind);}
	| <LTE>{OperatorStack.push(token.kind);}
}

void EXP():
{
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes ,opRes=0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	TERMINO(){
         if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
             if (OperatorStack.peek() == 17 || OperatorStack.peek() == 18)
             {
                 opDer = OperandStack.pop();
                 tyDer = TypeStack.pop();
                 opIzq = OperandStack.pop();
                 tyIzq = TypeStack.pop();
                 opOPerator = OperatorStack.pop();
                 tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
                 if(tyRes != -1){
                     if(tyRes == 0){
                         opRes = memTemporal.asignacionMemoriaEntera(0);
                         OperandStack.push(opRes);
                      }
                      if(tyRes == 1){
                         opRes = memTemporal.asignacionMemoriaFlotante(0);
                         OperandStack.push(opRes);
                      }
                      cuadActual.CuadruploSetComplete(cudruplosArr.size(),opOPerator-17,opIzq,opDer,opRes);
                      cudruplosArr.add(cuadActual);
                      TypeStack.add(tyRes+33);
                 }
             }
         }
    }
    (LOOKAHEAD(3)
    (<ADDITION>{
        OperatorStack.push(token.kind);
    } | <SUBSTRACTION>{
        OperatorStack.push(token.kind);
    }) EXP())?
}

void TERMINO():
{
int opDer,opIzq,opOPerator, tyDer, tyIzq, tyRes = 8,opRes =0;
Cuadruplo cuadActual = new Cuadruplo();
}
{
	FACTOR(){
       if(!(OperatorStack.isEmpty()) && !(OperandStack.size() < 2)){
                    if (OperatorStack.peek() == 19 || OperatorStack.peek() == 20)
                    {
                        opDer = OperandStack.pop();
                        tyDer = TypeStack.pop();
                        opIzq = OperandStack.pop();
                        tyIzq = TypeStack.pop();
                        opOPerator = OperatorStack.pop();
                        tyRes = cuboSemantico.getValidacion(opOPerator,tyIzq,tyDer);
                        if(tyRes != -1){
                            if(tyRes == 0){
                                opRes = memTemporal.asignacionMemoriaEntera(0);
                                OperandStack.push(opRes);
                             }
                             if(tyRes == 1){
                                opRes = memTemporal.asignacionMemoriaFlotante(0);
                                OperandStack.push(opRes);
                             }
                             cuadActual.CuadruploSetComplete(cudruplosArr.size(),opOPerator-17,opIzq,opDer,opRes);
                             cudruplosArr.add(cuadActual);
                             TypeStack.add(tyRes+33);
                        }
                    }
                }
    } (LOOKAHEAD(3) (<MULTIPLICATION>{
                         OperatorStack.push(token.kind);
                       } | <DIVISION>{
                             OperatorStack.push(token.kind);
                           })
	TERMINO())?
}

void FACTOR():
{}
{
	<LPHARENTESIS>{
	OperatorStack.push(token.kind);
	}
	MEGAEXPRESION()
	<RPHARENTESIS>{
	OperatorStack.pop();
	}
	| (<SUBSTRACTION>)? VARCTE()
}

void VARCTE():
{}
{
	<ID>{
	    //Objeto i = search();
	}(<LBRACKET> EXP() <RBRACKET>)?  |<cte_i>{
	        //OperandStack.push(Integer.parseInt(token.image));
	        OperandStack.push(memConstante.asignacionMemoriaEntera(Integer.parseInt(token.image)));
            TypeStack.push(token.kind);
            } | <cte_f>{
               //OperandStack.push(token.kind);
                OperandStack.push(memConstante.asignacionMemoriaFlotante(Float.parseFloat(token.image)));
                TypeStack.push(token.kind);
                }
}

void CONDICION():
{
Cuadruplo cuadActual = new Cuadruplo();
}
{
	{listaContextos.addElement(new TablaVariables());} <IF> <LPHARENTESIS> MEGAEXPRESION() <RPHARENTESIS>
	 {
	 cuadActual.CuadruploSetIzqRes(cudruplosArr.size(),18,OperandStack.pop(),-1);
	 JumpStack.push(cudruplosArr.size());
	 cudruplosArr.add(cuadActual);
	 }BLOQUE(){
              cudruplosArr.get(JumpStack.pop()).setiResultado(cudruplosArr.size());
              	 } CONDICION_AUX() {listaContextos.remove(listaContextos.lastElement());}
}

void CONDICION_AUX():
{}
{
	(<ELSE> (CONDICION() | BLOQUE()))?
}

void CICLO():
{
Cuadruplo cuadGotof = new Cuadruplo();
Cuadruplo cuadGoto = new Cuadruplo();
}
{
	{listaContextos.addElement(new TablaVariables());} <WHILE>{
	    JumpStack.push(cudruplosArr.size());
	} <LPHARENTESIS> MEGAEXPRESION() <RPHARENTESIS>{
	    cuadGotof.CuadruploSetIzqRes(cudruplosArr.size(),18,OperandStack.pop(),-1);
    	JumpStack.push(cudruplosArr.size());
    	cudruplosArr.add(cuadGotof);
	} BLOQUE(){
	cudruplosArr.get(JumpStack.pop()).setiResultado(cudruplosArr.size()+1);
	cuadGoto.CuadruploSetIzqRes(cudruplosArr.size(),17,OperandStack.pop(),JumpStack.pop());
	cudruplosArr.add(cuadGoto);
	} {listaContextos.remove(listaContextos.lastElement());}
}

void VARS():
{}
{
	TIPO(){
	    //Indica el tipo del siguiente conjunto de variables
	    tipo = token.kind-6;
	}(VARS_AUX1() | VARS_AUX2()) <SEMICOLON>
}

void VARS_AUX1():
{
//TODO Trabajar en el manejo de vectores
}
{
	<VECTOR> <ID> <LBRACKET> MEGAEXPRESION() <RBRACKET> (<EQUAL> <LKEY> VARS_AUX1_1() <RKEY>)?
}

void VARS_AUX1_1():
{}
{
	MEGAEXPRESION() (LOOKAHEAD(2) <COMA> VARS_AUX1_1())*
}
void VARS_AUX2():
{
Token identificador;            //El nombre de la variable
Objeto var = new Objeto(0,0,0);   //La variable con tipo y valor
}
{
	identificador = <ID> {
	    var.setId(identificador.image);
	    var.setType(tipo);
	    if(tipo == 0){
	        var.setiDireccion(memGlobal.asignacionMemoriaEntera(0));
	    }
	    if(tipo== 1){
        	var.setiDireccion(memGlobal.asignacionMemoriaFlotante(0));
        }

	} (<EQUAL> MEGAEXPRESION())? {
	}
	(<","> VARS_AUX2())?
}

void MODULO():
{
    listaContextos.addElement(new TablaVariables());
}
{
	MODULO_TIPO() <ID> <LPHARENTESIS> MODULO_AUX() <RPHARENTESIS> BLOQUE()
}

void MODULO_TIPO():
{}
{
	<VOID> | <INT> | <FLOAT> | <CHAR> | <VECTOR>
}

void MODULO_AUX():
{}
{
	(TIPO() <ID> (<COMA> MODULO_AUX())?)?
}

void RETORNO():
{
    Cuadruplo cuadActual = new Cuadruplo();
}
{
	<RETURN> (LOOKAHEAD(3) VARCTE(){
        cuadActual.CuadruploSetRes(cudruplosArr.size(),15,token.kind);
        cudruplosArr.add(cuadActual);
    } | EXP(){
            cuadActual.CuadruploSetRes(cudruplosArr.size(),15,token.kind);
            cudruplosArr.add(cuadActual);
        }) <SEMICOLON>
}

void LLAMADA_FUNC():
{
Cuadruplo cuadActual = new Cuadruplo();
}
{
	<ID>{
        cuadActual.CuadruploSetRes(cudruplosArr.size(),14,token.kind);
        cudruplosArr.add(cuadActual);
	} <LPHARENTESIS> LLAMADA_AUX(1) <RPHARENTESIS> <SEMICOLON>
}

void LLAMADA_AUX(int cont):
{}
{
	(LLAMADA_PARAM(cont) (<COMA> LLAMADA_AUX(cont + 1))?)?
}

void LLAMADA_PARAM(int cont):
{
    Cuadruplo cuadActual = new Cuadruplo();
}
{
	LOOKAHEAD(3) <ID>{
           cuadActual.CuadruploSetRes(cudruplosArr.size(),16,cont);
           cudruplosArr.add(cuadActual);
        } |  EXP(){
          cuadActual.CuadruploSetRes(cudruplosArr.size(),16,cont);
          cuadActual.setiIzquierda(OperandStack.pop());
          cudruplosArr.add(cuadActual);
        }
}

void TIPO():
{}
{
	<INT> | <FLOAT> | <CHAR>
}

void ESCRITURA():
{
printConsole = "";
}
{
	<PRINT> <LPHARENTESIS> (ESCRITURA_AUX() | ESCRITURA_AUX2()) <RPHARENTESIS> <SEMICOLON> {printConsoleArr.add(printConsole);}
}

void ESCRITURA_AUX():
{}
{
	<cte_s>{
	    String aux = token.image;
	    aux = aux.substring(1);
	    aux = aux.substring(0, aux.length()-1);
	    printConsole += aux;
	}
	(<ADDITION> ESCRITURA_AUX2())?
}

void ESCRITURA_AUX2():
{
Objeto var;
}
{
    EXP() {//printConsole += var.getValue().toString();
    } (<ADDITION> ESCRITURA_AUX())?
}
