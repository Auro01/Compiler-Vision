/* Generated By:JavaCC: Do not edit this line. compiladorConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface compiladorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PROGRAM = 1;
  /** RegularExpression Id. */
  int IF = 2;
  /** RegularExpression Id. */
  int ELSE = 3;
  /** RegularExpression Id. */
  int WHILE = 4;
  /** RegularExpression Id. */
  int PRINT = 5;
  /** RegularExpression Id. */
  int INT = 6;
  /** RegularExpression Id. */
  int FLOAT = 7;
  /** RegularExpression Id. */
  int CHAR = 8;
  /** RegularExpression Id. */
  int VECTOR = 9;
  /** RegularExpression Id. */
  int RETURN = 10;
  /** RegularExpression Id. */
  int VOID = 11;
  /** RegularExpression Id. */
  int LBRACKET = 12;
  /** RegularExpression Id. */
  int RBRACKET = 13;
  /** RegularExpression Id. */
  int LKEY = 14;
  /** RegularExpression Id. */
  int RKEY = 15;
  /** RegularExpression Id. */
  int SEMICOLON = 16;
  /** RegularExpression Id. */
  int ADDITION = 17;
  /** RegularExpression Id. */
  int SUBSTRACTION = 18;
  /** RegularExpression Id. */
  int DIVISION = 19;
  /** RegularExpression Id. */
  int MULTIPLICATION = 20;
  /** RegularExpression Id. */
  int EQ = 21;
  /** RegularExpression Id. */
  int LTE = 22;
  /** RegularExpression Id. */
  int LT = 23;
  /** RegularExpression Id. */
  int GTE = 24;
  /** RegularExpression Id. */
  int GT = 25;
  /** RegularExpression Id. */
  int DFT = 26;
  /** RegularExpression Id. */
  int OR = 27;
  /** RegularExpression Id. */
  int AND = 28;
  /** RegularExpression Id. */
  int EQUAL = 29;
  /** RegularExpression Id. */
  int LPHARENTESIS = 30;
  /** RegularExpression Id. */
  int RPHARENTESIS = 31;
  /** RegularExpression Id. */
  int COMA = 32;
  /** RegularExpression Id. */
  int QUOTE = 33;
  /** RegularExpression Id. */
  int cte_i = 34;
  /** RegularExpression Id. */
  int cte_f = 35;
  /** RegularExpression Id. */
  int cte_c = 36;
  /** RegularExpression Id. */
  int cte_s = 37;
  /** RegularExpression Id. */
  int ID = 38;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"Program\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"print\"",
    "\"int\"",
    "\"float\"",
    "\"char\"",
    "\"vector\"",
    "\"return\"",
    "\"void\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"*\"",
    "\"==\"",
    "\"<=\"",
    "\"<\"",
    "\">=\"",
    "\">\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"\\\"\"",
    "<cte_i>",
    "<cte_f>",
    "<cte_c>",
    "<cte_s>",
    "<ID>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"\\t\"",
    "<token of kind 44>",
  };

}
