/* Generated By:JavaCC: Do not edit this line. test.java */
import java.io.*;
class test implements testConstants {
        public static void main( String[] args )throws ParseException, Exception
        {
                try
                {
                test analizador = new test( System.in ) ;
                        analizador.Programa();
                        System.out.println("\u005ctSuccessfully compiled");
                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("\u005ctErrors found");
                }
        }

  static final public void Programa() throws ParseException {
        tabla_global = new ValidadorSemantico();
        tabla_global.SetTables();
    jj_consume_token(PROGRAM);
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
    Programa_AUX();
    jj_consume_token(0);
  }

  static final public void Programa_AUX() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      VARS();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case CHAR:
      case VECTOR:
      case VOID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_2;
      }
      MODULO();
    }
    BLOQUE();
  }

  static final public void BLOQUE() throws ParseException {
    if (jj_2_2(2)) {
      jj_consume_token(LKEY);
      BLOQUE_AUX();
      jj_consume_token(RKEY);
    } else {
      ;
    }
  }

  static final public void BLOQUE_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case PRINT:
    case INT:
    case FLOAT:
    case CHAR:
    case RETURN:
    case ID:
      ESTATUTO();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case PRINT:
      case INT:
      case FLOAT:
      case CHAR:
      case RETURN:
      case EMPTY:
      case ID:
        BLOQUE_AUX();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      break;
    case EMPTY:
      jj_consume_token(EMPTY);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ESTATUTO() throws ParseException {
    if (jj_2_3(3)) {
      VARS();
    } else if (jj_2_4(3)) {
      ASIGNACION();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        CONDICION();
        break;
      case PRINT:
        ESCRITURA();
        break;
      case WHILE:
        CICLO();
        break;
      case ID:
        LLAMADA_FUNC();
        break;
      case RETURN:
        RETORNO();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void MEGAEXPRESION() throws ParseException {
    EXPRESION();
    MEGAEXPRESION_AUX();
  }

  static final public void MEGAEXPRESION_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
    case 28:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
        break;
      case 28:
        jj_consume_token(28);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      EXPRESION();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void EXPRESION() throws ParseException {
    EXP();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
    case 30:
    case 31:
      EXPRESION_AUX();
      EXP();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void EXPRESION_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      jj_consume_token(29);
      break;
    case 30:
      jj_consume_token(30);
      break;
    case 31:
      jj_consume_token(31);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void EXP() throws ParseException {
    TERMINO();
    if (jj_2_5(3)) {
      EXP_AUX();
      EXP();
    } else {
      ;
    }
  }

  static final public void EXP_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
      break;
    case 33:
      jj_consume_token(33);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void TERMINO() throws ParseException {
    FACTOR();
    if (jj_2_6(3)) {
      TERMINO_AUX();
      TERMINO();
    } else {
      ;
    }
  }

  static final public void TERMINO_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
      break;
    case 35:
      jj_consume_token(35);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FACTOR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
      jj_consume_token(36);
      MEGAEXPRESION();
      jj_consume_token(37);
      break;
    case cte_i:
    case cte_f:
    case ID:
    case 32:
    case 33:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
      case 33:
        FACTOR_AUX();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      VARCTE();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FACTOR_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
      break;
    case 33:
      jj_consume_token(33);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void VARCTE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        EXP();
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
    case cte_i:
      jj_consume_token(cte_i);
      break;
    case cte_f:
      jj_consume_token(cte_f);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void CONDICION() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(36);
    MEGAEXPRESION();
    jj_consume_token(37);
    BLOQUE();
    CONDICION_AUX();
  }

  static final public void CONDICION_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        CONDICION();
        break;
      default:
        jj_la1[15] = jj_gen;
        BLOQUE();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  static final public void CICLO() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(36);
    MEGAEXPRESION();
    jj_consume_token(37);
    BLOQUE();
  }

  static final public void VARS() throws ParseException {
        int iTokenK;
    TIPO();
                iTokenK = token.kind;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VECTOR:
      VARS_AUX1(iTokenK);
      break;
    case ID:
      VARS_AUX2(iTokenK);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void VARS_AUX1(int iTokenK) throws ParseException {
        Token tVar;
    jj_consume_token(VECTOR);
    tVar = jj_consume_token(ID);
                        tabla_global.InsertarSimbolo(tVar, iTokenK);
    jj_consume_token(LBRACKET);
    EXP();
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      jj_consume_token(38);
      jj_consume_token(LKEY);
      VARS_AUX1_1(iTokenK,tVar);
      jj_consume_token(RKEY);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  static final public void VARS_AUX1_1(int iTokenK, Token tVar) throws ParseException {
        Token tVar2;
        String res;
        boolean imp = false;
    VARS_AUX2_1();
                tVar2 = token;
                res = tabla_global.checkAsing(tVar, tVar2);

                if(res != " ")
                {
                        System.out.println(res);
                        imp = true;
                }
    label_3:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(39);
      VARS_AUX1_1(iTokenK,tVar);
    }
  }

  static final public void VARS_AUX2(int iTokenK) throws ParseException {
        Token tVar;
        Token tVar2;
        String res;
        boolean imp = false;
    tVar = jj_consume_token(ID);
                        tabla_global.InsertarSimbolo(tVar, iTokenK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      jj_consume_token(38);
      VARS_AUX2_1();
                tVar2 = token;
                res = tabla_global.checkAsing(tVar, tVar2);

                if(res != " ")
                {
                        System.out.println(res);
                        imp = true;
                }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
      jj_consume_token(39);
      VARS_AUX2(iTokenK);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  static final public void VARS_AUX2_1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cte_i:
      jj_consume_token(cte_i);
      break;
    case cte_f:
      jj_consume_token(cte_f);
      break;
    case cte_c:
      jj_consume_token(cte_c);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void MODULO() throws ParseException {
    MODULO_TIPO();
    jj_consume_token(ID);
    jj_consume_token(36);
    MODULO_AUX();
    jj_consume_token(37);
    BLOQUE();
  }

  static final public void MODULO_TIPO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case VECTOR:
      jj_consume_token(VECTOR);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void MODULO_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:
      TIPO();
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        jj_consume_token(39);
        MODULO_AUX();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  static final public void RETORNO() throws ParseException {
    jj_consume_token(RETURN);
    if (jj_2_8(3)) {
      VARCTE();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cte_i:
      case cte_f:
      case ID:
      case 32:
      case 33:
      case 36:
        EXP();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void LLAMADA_FUNC() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(36);
    LLAMADA_AUX();
    jj_consume_token(37);
    jj_consume_token(SEMICOLON);
  }

  static final public void LLAMADA_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cte_i:
    case cte_f:
    case ID:
    case 32:
    case 33:
    case 36:
      LLAMADA_PARAM();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        jj_consume_token(39);
        LLAMADA_AUX();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  static final public void LLAMADA_PARAM() throws ParseException {
    if (jj_2_9(3)) {
      jj_consume_token(ID);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cte_i:
      case cte_f:
      case ID:
      case 32:
      case 33:
      case 36:
        EXP();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void TIPO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ASIGNACION() throws ParseException {
        Token v1;
        Token v2;
        Token v3;
        int aux;
        String res;
        boolean imp = false;
    v1 = jj_consume_token(ID);
    jj_consume_token(38);
    EXP();
    v2 = token;
        res = tabla_global.checkAsing(v1, v2);

        if(res != " ")
        {
                System.out.println(res);
                imp = true;
        }
    v2 = token;
        res = tabla_global.checkAsing(v1, v2);

        if(res != " ")
        {
                System.out.println(res);
                imp = true;
        }
    jj_consume_token(SEMICOLON);
  }

  static final public void ESCRITURA() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(36);
    ESCRITURA_AUX();
    jj_consume_token(37);
    jj_consume_token(SEMICOLON);
  }

  static final public void ESCRITURA_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cte_i:
    case cte_f:
    case ID:
    case 32:
    case 33:
    case 36:
      EXP();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cte_i:
      case cte_f:
      case ID:
      case 32:
      case 33:
      case 36:
      case 40:
        ESCRITURA_AUX();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      break;
    case 40:
      jj_consume_token(40);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case cte_i:
        case cte_f:
        case ID:
        case cte_c:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case cte_c:
          jj_consume_token(cte_c);
          break;
        case cte_i:
        case cte_f:
        case ID:
          VARCTE();
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(40);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_3R_5() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(LKEY)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(36)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_10()) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(38)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(VECTOR)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public testTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xbc0,0x1205f4,0x1205f4,0x100434,0x18000000,0x18000000,0xe0000000,0xe0000000,0x0,0x0,0x0,0x1c0000,0x0,0x1000,0x1c0000,0x4,0x8,0x100200,0x0,0x0,0x0,0x3c0000,0xbc0,0x0,0x1c0,0x1c0000,0x0,0x1c0000,0x1c0000,0x1c0,0x1c0000,0x3c0000,0x3c0000,0x1c0000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0xc,0x3,0x13,0x3,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x80,0x0,0x0,0x80,0x0,0x13,0x80,0x13,0x13,0x0,0x113,0x0,0x0,0x113,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public test(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public test(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new testTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public test(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new testTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public test(testTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(testTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
