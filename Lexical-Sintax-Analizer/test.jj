PARSER_BEGIN(test)
import java.io.*;
class test 
{
	public static void main( String[] args )throws ParseException, Exception
	{
		try
		{		
     		test analizador = new test( System.in ) ;
			analizador.Programa();
			System.out.println("\tSuccessfully compiled");
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("\tErrors found");
		}
	}
}
PARSER_END(test)

//palabras reservadas
TOKEN:
{
	<PROGRAM: "Program" >
	| <IF: "if" >
	| <ELSE: "else" >
	| <WHILE: "while" >
	| <PRINT: "print" >
	| <INT: "int" >//6
	| <FLOAT: "float" >//7
	| <CHAR: "char" >//8
	| <VECTOR: "vector" >
	| <RETURN: "return" >
	| <VOID: "void">
	| <LBRACKET: "[">
	| <RBRACKET: "]">
	| <LKEY: "{">
    | <RKEY: "}">
	| <SEMICOLON: ";">
	| <EMPTY: "">
}

TOKEN:
{
	<cte_i: ( ["0"-"9"] )+ > //18
	|<cte_f: ( ["0"-"9"] )+("."["0"-"9"])?  >//19
	|< ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >//20
	|<cte_c :  ["a"-"z","A"-"Z","0"-"9","#"-"%"] >//21
	 
}

SKIP:
{
	" "|"\n" | "\r" | "\r\n" | "\t"
}

void Programa():
{
	ValidadorSemantico.SetTables();	
}
{
	<PROGRAM> <ID> <SEMICOLON> Programa_AUX() <EOF>
}
void Programa_AUX():
{}
{
   (LOOKAHEAD(3) VARS())* (MODULO())* BLOQUE()
}

void BLOQUE():
{}
{
	(<LKEY> BLOQUE_AUX() <RKEY>)?
}

void BLOQUE_AUX():
{}
{
	ESTATUTO() (BLOQUE_AUX())? | <EMPTY>
}

void ESTATUTO():
{}
{
	LOOKAHEAD(3) VARS() | LOOKAHEAD(3) ASIGNACION() | CONDICION() | ESCRITURA() | CICLO() | LLAMADA_FUNC() | RETORNO()

}

void MEGAEXPRESION():
{}
{
	EXPRESION() MEGAEXPRESION_AUX()
}  

void MEGAEXPRESION_AUX():
{}
{ 
	((<"&&"> | <"||">) EXPRESION())?
}  

void EXPRESION():
{}
{
	EXP() (EXPRESION_AUX() EXP())?
}                                                  

void EXPRESION_AUX():
{}
{  
	<"<"> | <">"> | <"!=">
}

void EXP():
{}
{
	TERMINO() (LOOKAHEAD(3) EXP_AUX() EXP())?
}

void EXP_AUX():
{}
{  
	<"+"> | <"-">
}

void TERMINO():
{}
{
	FACTOR() (LOOKAHEAD(3) TERMINO_AUX() TERMINO())?
}

void TERMINO_AUX():
{}
{
	<"*"> | <"/">
}

void FACTOR():
{}
{
	<"("> MEGAEXPRESION() <")"> | (FACTOR_AUX())? VARCTE()
}

void FACTOR_AUX():
{}
{
	<"+"> | <"-">
}

void VARCTE():
{}
{
	<ID> (<LBRACKET> EXP() <RBRACKET>)? | <cte_i> | <cte_f>
}

void CONDICION():
{}
{
	<IF> <"("> MEGAEXPRESION() <")"> BLOQUE() CONDICION_AUX()
}

void CONDICION_AUX():
{}
{
	(<ELSE> (CONDICION() | BLOQUE()))?
}

void CICLO():
{}
{
	<WHILE> <"("> MEGAEXPRESION() <")"> BLOQUE() 
}

void VARS():
{
	int iTokenK;
}
{
	TIPO(){
		iTokenK = token.kind;
	}
	 (VARS_AUX1() | VARS_AUX2(iTokenK)) <SEMICOLON>
}

void VARS_AUX1():
{}
{
	<VECTOR> <ID> <LBRACKET> EXP() <RBRACKET> (<"="> <LKEY> VARS_AUX1_1() <RKEY>)?
}

void VARS_AUX1_1():
{}
{
	VARS_AUX2_1() (<","> (<"="> <LKEY> VARS_AUX1_1() <RKEY>)?)?
}

void VARS_AUX2(int iTokenK):
{
	Token var;	
}
{
	var = <ID>{		
			ValidadorSemantico.InsertarSimbolo(var, iTokenK);
		} (<"="> VARS_AUX2_1())? (<","> VARS_AUX2(iTokenK))?
}

void VARS_AUX2_1():
{}
{
	<cte_i> | <cte_f> | <cte_c> | <ID>
}

void MODULO():
{}
{
	MODULO_TIPO() <ID> <"("> MODULO_AUX() <")"> BLOQUE()
}

void MODULO_TIPO():
{}
{
	<VOID> | <INT> | <FLOAT> | <CHAR> | <VECTOR>
}

void MODULO_AUX():
{}
{
	(TIPO() <ID> (<","> MODULO_AUX())?)?
}

void RETORNO():
{}
{
	<RETURN> (LOOKAHEAD(3) VARCTE() | EXP()) <SEMICOLON>
}

void LLAMADA_FUNC():
{}
{
	<ID> <"("> LLAMADA_AUX() <")"> <SEMICOLON>
}

void LLAMADA_AUX():
{}
{
	(LLAMADA_PARAM() (<","> LLAMADA_AUX())?)?
}

void LLAMADA_PARAM():
{}
{
	LOOKAHEAD(3) <ID> | EXP()
}

void TIPO():
{}
{
	<INT> | <FLOAT> | <CHAR> 
}

void ASIGNACION():
{
	Token v1;
	Token v2;
	Token v3;
	int aux;
	String res;
	boolean imp = false;
}
{
	v1 = <ID> <"="> EXP(){  
    v2 = token;
    System.out.println(v1);
	res = ValidadorSemantico.checkAsing(v1, v2);
	
	if(res != " ")
	{
		System.out.println(res);
		imp = true;
	}
  }{  
    v2 = token;
	res = ValidadorSemantico.checkAsing(v1, v2);
	
	if(res != " ")
	{
		System.out.println(res);
		imp = true;
	}
  } <SEMICOLON>
}

void ESCRITURA():
{}
{
	<PRINT> <"("> ESCRITURA_AUX() <")"> <SEMICOLON>
}

void ESCRITURA_AUX():
{}
{
	EXP() (ESCRITURA_AUX())? | <"\""> (<cte_c> | VARCTE())* <"\"">
}